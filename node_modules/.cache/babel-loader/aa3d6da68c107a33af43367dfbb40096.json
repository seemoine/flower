{"ast":null,"code":"import { ACTIONABLE_ITEMS } from \"../types/contract\";\nimport { FRUITS } from \"../types/fruits\";\nconst CACHED_FARMS_KEY = \"farms\";\nconst DEFAULT = {\n  selectedItem: FRUITS[0].name\n};\n\nfunction getFarms() {\n  const stored = localStorage.getItem(CACHED_FARMS_KEY);\n\n  if (!stored) {\n    return {};\n  }\n\n  try {\n    const parsed = JSON.parse(stored);\n    return parsed;\n  } catch (e) {\n    console.error(\"Parsing localstorage failed: \", e);\n    return {};\n  }\n}\n\nexport function getFarm(accountId) {\n  const farms = getFarms();\n  const farm = farms[accountId];\n\n  if (!farm) {\n    return DEFAULT;\n  }\n\n  return farm;\n}\nexport function cacheAccountFarm(accountId, state) {\n  const farms = getFarms();\n  const newFarms = { ...farms,\n    [accountId]: state\n  };\n  localStorage.setItem(CACHED_FARMS_KEY, JSON.stringify(newFarms));\n}\nexport function getSelectedItem(accountId) {\n  const farms = getFarms();\n  const farm = farms[accountId];\n\n  if (!farm || !farm.selectedItem) {\n    return FRUITS[0];\n  }\n\n  const item = ACTIONABLE_ITEMS.find(item => item.name === farm.selectedItem);\n  return item;\n}\nconst ONBOARDED_KEY = \"onboarded_time\";\n/**\n * Once a user has saved their farm\n */\n\nexport function onboarded() {\n  localStorage.setItem(ONBOARDED_KEY, Date.now().toString());\n}\nexport function hasOnboarded() {\n  return !!localStorage.getItem(ONBOARDED_KEY);\n}","map":{"version":3,"sources":["/home/jacob/Documents/Programming/myApp/src/dapp/utils/localStorage.ts"],"names":["ACTIONABLE_ITEMS","FRUITS","CACHED_FARMS_KEY","DEFAULT","selectedItem","name","getFarms","stored","localStorage","getItem","parsed","JSON","parse","e","console","error","getFarm","accountId","farms","farm","cacheAccountFarm","state","newFarms","setItem","stringify","getSelectedItem","item","find","ONBOARDED_KEY","onboarded","Date","now","toString","hasOnboarded"],"mappings":"AAAA,SAEEA,gBAFF,QAIO,mBAJP;AAKA,SAASC,MAAT,QAAuB,iBAAvB;AASA,MAAMC,gBAAgB,GAAG,OAAzB;AAEA,MAAMC,OAAkB,GAAG;AACzBC,EAAAA,YAAY,EAAEH,MAAM,CAAC,CAAD,CAAN,CAAUI;AADC,CAA3B;;AAIA,SAASC,QAAT,GAAiC;AAC/B,QAAMC,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqBP,gBAArB,CAAf;;AAEA,MAAI,CAACK,MAAL,EAAa;AACX,WAAO,EAAP;AACD;;AAED,MAAI;AACF,UAAMG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,MAAX,CAAf;AAEA,WAAOG,MAAP;AACD,GAJD,CAIE,OAAOG,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAc,+BAAd,EAA+CF,CAA/C;AACA,WAAO,EAAP;AACD;AACF;;AAED,OAAO,SAASG,OAAT,CAAiBC,SAAjB,EAA+C;AACpD,QAAMC,KAAK,GAAGZ,QAAQ,EAAtB;AACA,QAAMa,IAAI,GAAGD,KAAK,CAACD,SAAD,CAAlB;;AAEA,MAAI,CAACE,IAAL,EAAW;AACT,WAAOhB,OAAP;AACD;;AAED,SAAOgB,IAAP;AACD;AAED,OAAO,SAASC,gBAAT,CAA0BH,SAA1B,EAA6CI,KAA7C,EAA+D;AACpE,QAAMH,KAAK,GAAGZ,QAAQ,EAAtB;AACA,QAAMgB,QAAqB,GAAG,EAC5B,GAAGJ,KADyB;AAE5B,KAACD,SAAD,GAAaI;AAFe,GAA9B;AAKAb,EAAAA,YAAY,CAACe,OAAb,CAAqBrB,gBAArB,EAAuCS,IAAI,CAACa,SAAL,CAAeF,QAAf,CAAvC;AACD;AAED,OAAO,SAASG,eAAT,CAAyBR,SAAzB,EAA4D;AACjE,QAAMC,KAAK,GAAGZ,QAAQ,EAAtB;AAEA,QAAMa,IAAI,GAAGD,KAAK,CAACD,SAAD,CAAlB;;AAEA,MAAI,CAACE,IAAD,IAAS,CAACA,IAAI,CAACf,YAAnB,EAAiC;AAC/B,WAAOH,MAAM,CAAC,CAAD,CAAb;AACD;;AAED,QAAMyB,IAAI,GAAG1B,gBAAgB,CAAC2B,IAAjB,CACVD,IAAD,IAAUA,IAAI,CAACrB,IAAL,KAAcc,IAAI,CAACf,YADlB,CAAb;AAIA,SAAOsB,IAAP;AACD;AAED,MAAME,aAAa,GAAG,gBAAtB;AAEA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,GAAqB;AAC1BrB,EAAAA,YAAY,CAACe,OAAb,CAAqBK,aAArB,EAAoCE,IAAI,CAACC,GAAL,GAAWC,QAAX,EAApC;AACD;AAED,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAO,CAAC,CAACzB,YAAY,CAACC,OAAb,CAAqBmB,aAArB,CAAT;AACD","sourcesContent":["import {\n  ActionableItem,\n  ACTIONABLE_ITEMS,\n  Fruit,\n} from \"../types/contract\";\nimport { FRUITS } from \"../types/fruits\";\n\ninterface FarmState {\n  selectedItem?: string;\n}\n\n// Account ID -> FarmState\ntype CachedFarms = Record<string, FarmState>;\n\nconst CACHED_FARMS_KEY = \"farms\";\n\nconst DEFAULT: FarmState = {\n  selectedItem: FRUITS[0].name,\n};\n\nfunction getFarms(): CachedFarms {\n  const stored = localStorage.getItem(CACHED_FARMS_KEY);\n\n  if (!stored) {\n    return {};\n  }\n\n  try {\n    const parsed = JSON.parse(stored);\n\n    return parsed;\n  } catch (e) {\n    console.error(\"Parsing localstorage failed: \", e);\n    return {};\n  }\n}\n\nexport function getFarm(accountId: string): FarmState {\n  const farms = getFarms();\n  const farm = farms[accountId];\n\n  if (!farm) {\n    return DEFAULT;\n  }\n\n  return farm;\n}\n\nexport function cacheAccountFarm(accountId: string, state: FarmState) {\n  const farms = getFarms();\n  const newFarms: CachedFarms = {\n    ...farms,\n    [accountId]: state,\n  };\n\n  localStorage.setItem(CACHED_FARMS_KEY, JSON.stringify(newFarms));\n}\n\nexport function getSelectedItem(accountId: string): ActionableItem {\n  const farms = getFarms();\n\n  const farm = farms[accountId];\n\n  if (!farm || !farm.selectedItem) {\n    return FRUITS[0];\n  }\n\n  const item = ACTIONABLE_ITEMS.find(\n    (item) => item.name === farm.selectedItem\n  );\n\n  return item;\n}\n\nconst ONBOARDED_KEY = \"onboarded_time\";\n\n/**\n * Once a user has saved their farm\n */\nexport function onboarded() {\n  localStorage.setItem(ONBOARDED_KEY, Date.now().toString());\n}\n\nexport function hasOnboarded() {\n  return !!localStorage.getItem(ONBOARDED_KEY);\n}\n"]},"metadata":{},"sourceType":"module"}
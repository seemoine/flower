{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/Programming/myApp/src/dapp/components/ui/NFTs.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Button } from \"../ui/Button\";\nimport { Message } from \"../ui/Message\";\nimport { InventoryItems } from \"../ui/InventoryItems\";\nimport { service } from \"../../machine\";\nimport basket from \"../../images/ui/basket.png\";\nimport building from \"../../images/buildings/side-house-2.png\";\nimport { recipes } from \"../../types/crafting\";\nimport { Box } from \"./Box\";\nimport \"./Crafting.css\";\nimport { useService } from \"@xstate/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NFT_ITEMS = recipes.filter(_c = recipe => recipe.type === \"NFT\" && !recipe.communityMember);\n_c2 = NFT_ITEMS;\nexport const NFTs = _ref => {\n  _s();\n\n  let {\n    onClose,\n    balance,\n    inventory,\n    totalItemSupplies,\n    level\n  } = _ref;\n  const [amount, setAmount] = React.useState(1);\n  const [selectedRecipe, setSelectedRecipe] = React.useState(NFT_ITEMS[0]);\n  const [machineState, send] = useService(service);\n  const isUnsaved = machineState.context.blockChain.isUnsaved();\n  console.log({\n    inventory\n  });\n\n  const changeRecipe = recipe => {\n    setAmount(1);\n    setSelectedRecipe(recipe);\n  };\n\n  const craft = () => {\n    service.send(\"CRAFT\", {\n      recipe: selectedRecipe,\n      amount\n    });\n    onClose();\n  };\n\n  const boxes = NFT_ITEMS.map(recipe => ({\n    isSelected: recipe.name === selectedRecipe.name,\n    onClick: () => changeRecipe(recipe),\n    image: recipe.image\n  })); // Pad array with empty boxes\n\n  for (let i = boxes.length; i < 10; i++) {\n    boxes.push({\n      disabled: true\n    });\n  } // Currently only have statue supply so hardcode the rest to 5000\n\n\n  const amountLeft = selectedRecipe.supply && selectedRecipe.supply - totalItemSupplies[selectedRecipe.name];\n  const ingredientList = selectedRecipe.ingredients.map(ingredient => {\n    const inventoryCount = ingredient.name === \"$SFF\" ? balance : inventory[ingredient.name];\n    const price = ingredient.amount * amount;\n    return {\n      name: ingredient.name,\n      image: ingredient.image,\n      price,\n      canAfford: inventoryCount >= price\n    };\n  });\n\n  const Action = () => {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"recipe-description\",\n      children: \"Locked\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this);\n\n    if (isUnsaved) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upgrade-required\",\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          children: [\"Save your farm first\", /*#__PURE__*/_jsxDEV(\"img\", {\n            //src={cancel}\n            className: \"insufficient-funds-cross\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (selectedRecipe.supply && amountLeft === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"recipe-description\",\n        children: \"No supply left \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 14\n      }, this);\n    }\n\n    const itemCount = inventory[selectedRecipe.name];\n    const limit = selectedRecipe.limit || 1;\n\n    if (itemCount < limit) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"craft-count\",\n          children: /*#__PURE__*/_jsxDEV(Message, {\n            children: amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: craft,\n          disabled: !canAfford,\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"craft-button-text\",\n            children: \"Craft\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"recipe-description\",\n      children: \"Already minted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 12\n    }, this);\n  };\n\n  const canAfford = ingredientList.every(ingredient => ingredient.canAfford);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"crafting\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"crafting-left\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"crafting-items\",\n        children: boxes.map(box => /*#__PURE__*/_jsxDEV(Box, {\n          count: box.count,\n          onClick: box.onClick,\n          image: box.image,\n          isSelected: box.isSelected,\n          disabled: box.disabled\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"inventory-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: basket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Inventory\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"inventory\",\n        children: /*#__PURE__*/_jsxDEV(InventoryItems, {\n          inventory: inventory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://docs.sunflower-farmers.com/crafting-guide\",\n        target: \"_blank\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"current-price-supply-demand\",\n          children: \"Read more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"recipe\",\n      children: [selectedRecipe.supply && !isNaN(amountLeft) && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"nft-count\",\n        children: `${amountLeft} left!`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"recipe-title\",\n        children: selectedRecipe.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"crafting-item\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: selectedRecipe.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"recipe-description\",\n        children: selectedRecipe.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"ingredients\",\n        children: ingredientList.map(ingredient => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ingredient\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"ingredient-image\",\n              src: ingredient.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ingredient-count\",\n              children: ingredient.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `ingredient-text ${!ingredient.canAfford && \"ingredient-insufficient\"}`,\n            children: ingredient.price\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), selectedRecipe.farmLevel && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ingredient\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"ingredient-image\",\n            src: building\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ingredient-count\",\n            children: \"Farm level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `ingredient-text ${level < selectedRecipe.farmLevel && \"ingredient-insufficient\"}`,\n          children: selectedRecipe.farmLevel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"craft-action\",\n        children: Action()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), selectedRecipe.openSeaLink && /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"recipe-description\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          target: \"_blank\",\n          href: selectedRecipe.openSeaLink,\n          style: {\n            color: \"white\",\n            textDecoration: \"underline\"\n          },\n          children: \"View on OpenSea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NFTs, \"k4hfu6OLM6Fo6JHFSuMNghiggUY=\", false, function () {\n  return [useService];\n});\n\n_c3 = NFTs;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"NFT_ITEMS$recipes.filter\");\n$RefreshReg$(_c2, \"NFT_ITEMS\");\n$RefreshReg$(_c3, \"NFTs\");","map":{"version":3,"sources":["/home/jacob/Documents/Programming/myApp/src/dapp/components/ui/NFTs.tsx"],"names":["React","Button","Message","InventoryItems","service","basket","building","recipes","Box","useService","NFT_ITEMS","filter","recipe","type","communityMember","NFTs","onClose","balance","inventory","totalItemSupplies","level","amount","setAmount","useState","selectedRecipe","setSelectedRecipe","machineState","send","isUnsaved","context","blockChain","console","log","changeRecipe","craft","boxes","map","isSelected","name","onClick","image","i","length","push","disabled","amountLeft","supply","ingredientList","ingredients","ingredient","inventoryCount","price","canAfford","Action","itemCount","limit","every","box","count","isNaN","description","farmLevel","openSeaLink","color","textDecoration"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { Panel } from \"../ui/Panel\";\nimport { Button } from \"../ui/Button\";\nimport { Message } from \"../ui/Message\";\nimport { InventoryItems } from \"../ui/InventoryItems\";\n\nimport {\n  Context,\n  BlockchainEvent,\n  BlockchainState,\n  service,\n} from \"../../machine\";\n\nimport hammer from \"../../images/ui/hammer.png\";\nimport basket from \"../../images/ui/basket.png\";\nimport building from \"../../images/buildings/side-house-2.png\";\n\nimport { recipes, Recipe, Inventory, Item } from \"../../types/crafting\";\nimport { Box, BoxProps } from \"./Box\";\n\nimport \"./Crafting.css\";\nimport { useService } from \"@xstate/react\";\n\ninterface Props {\n  onClose: () => void;\n  balance: number;\n  inventory: Inventory;\n  totalItemSupplies: Inventory;\n  level: number;\n}\n\nconst NFT_ITEMS = recipes.filter(\n  (recipe) => recipe.type === \"NFT\" && !recipe.communityMember\n);\n\nexport const NFTs: React.FC<Props> = ({\n  onClose,\n  balance,\n  inventory,\n  totalItemSupplies,\n  level,\n}) => {\n  const [amount, setAmount] = React.useState(1);\n  const [selectedRecipe, setSelectedRecipe] = React.useState(NFT_ITEMS[0]);\n  const [machineState, send] = useService<\n    Context,\n    BlockchainEvent,\n    BlockchainState\n  >(service);\n  const isUnsaved = machineState.context.blockChain.isUnsaved();\n\n  console.log({ inventory });\n  const changeRecipe = (recipe: Recipe) => {\n    setAmount(1);\n    setSelectedRecipe(recipe);\n  };\n\n  const craft = () => {\n    service.send(\"CRAFT\", {\n      recipe: selectedRecipe,\n      amount,\n    });\n    onClose();\n  };\n\n  const boxes: BoxProps[] = NFT_ITEMS.map((recipe) => ({\n    isSelected: recipe.name === selectedRecipe.name,\n    onClick: () => changeRecipe(recipe),\n    image: recipe.image,\n  }));\n\n  // Pad array with empty boxes\n  for (let i = boxes.length; i < 10; i++) {\n    boxes.push({ disabled: true });\n  }\n\n  // Currently only have statue supply so hardcode the rest to 5000\n  const amountLeft =\n    selectedRecipe.supply &&\n    selectedRecipe.supply - totalItemSupplies[selectedRecipe.name];\n\n  const ingredientList = selectedRecipe.ingredients.map((ingredient) => {\n    const inventoryCount =\n      ingredient.name === \"$SFF\" ? balance : inventory[ingredient.name];\n    const price = ingredient.amount * amount;\n    return {\n      name: ingredient.name,\n      image: ingredient.image,\n      price,\n      canAfford: inventoryCount >= price,\n    };\n  });\n\n  const Action = () => {\n    return <span id=\"recipe-description\">Locked</span>;\n\n    if (isUnsaved) {\n      return (\n        <div className=\"upgrade-required\">\n          <Message>\n            Save your farm first\n            <img\n              //src={cancel}\n              className=\"insufficient-funds-cross\"\n            />\n          </Message>\n        </div>\n      );\n    }\n\n    if (selectedRecipe.supply && amountLeft === 0) {\n      return <span id=\"recipe-description\">No supply left </span>;\n    }\n\n    const itemCount = inventory[selectedRecipe.name];\n    const limit = selectedRecipe.limit || 1;\n\n    if (itemCount < limit) {\n      return (\n        <>\n          <div id=\"craft-count\">\n            <Message>{amount}</Message>\n          </div>\n          <Button onClick={craft} disabled={!canAfford}>\n            <span id=\"craft-button-text\">Craft</span>\n          </Button>\n        </>\n      );\n    }\n\n    return <span id=\"recipe-description\">Already minted</span>;\n  };\n\n  const canAfford = ingredientList.every(\n    (ingredient) => ingredient.canAfford\n  );\n\n  return (\n    <div id=\"crafting\">\n      <div id=\"crafting-left\">\n        <div id=\"crafting-items\">\n          {boxes.map((box) => (\n            <Box\n              count={box.count}\n              onClick={box.onClick}\n              image={box.image}\n              isSelected={box.isSelected}\n              disabled={box.disabled}\n            />\n          ))}\n        </div>\n        <div id=\"inventory-header\">\n          <img src={basket} />\n          <span>Inventory</span>\n        </div>\n        <div id=\"inventory\">\n          <InventoryItems inventory={inventory} />\n        </div>\n        <a\n          href=\"https://docs.sunflower-farmers.com/crafting-guide\"\n          target=\"_blank\"\n        >\n          <h3 className=\"current-price-supply-demand\">Read more</h3>\n        </a>\n      </div>\n      <div id=\"recipe\">\n        {selectedRecipe.supply && !isNaN(amountLeft) && (\n          <span className=\"nft-count\">{`${amountLeft} left!`}</span>\n        )}\n        <span id=\"recipe-title\">{selectedRecipe.name}</span>\n        <div id=\"crafting-item\">\n          <img src={selectedRecipe.image} />\n        </div>\n        <span id=\"recipe-description\">{selectedRecipe.description}</span>\n\n        <div id=\"ingredients\">\n          {ingredientList.map((ingredient) => (\n            <div className=\"ingredient\">\n              <div>\n                <img className=\"ingredient-image\" src={ingredient.image} />\n                <span className=\"ingredient-count\">{ingredient.name}</span>\n              </div>\n              <span\n                className={`ingredient-text ${\n                  !ingredient.canAfford && \"ingredient-insufficient\"\n                }`}\n              >\n                {ingredient.price}\n              </span>\n            </div>\n          ))}\n        </div>\n        {selectedRecipe.farmLevel && (\n          <div className=\"ingredient\">\n            <div>\n              <img className=\"ingredient-image\" src={building} />\n              <span className=\"ingredient-count\">Farm level</span>\n            </div>\n            <span\n              className={`ingredient-text ${\n                level < selectedRecipe.farmLevel &&\n                \"ingredient-insufficient\"\n              }`}\n            >\n              {selectedRecipe.farmLevel}\n            </span>\n          </div>\n        )}\n        <div id=\"craft-action\">{Action()}</div>\n        {selectedRecipe.openSeaLink && (\n          <span id=\"recipe-description\">\n            <a\n              target=\"_blank\"\n              href={selectedRecipe.openSeaLink}\n              style={{ color: \"white\", textDecoration: \"underline\" }}\n            >\n              View on OpenSea\n            </a>\n          </span>\n        )}\n      </div>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
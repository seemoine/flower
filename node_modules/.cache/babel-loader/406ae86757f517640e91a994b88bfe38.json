{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/Programming/myApp/src/dapp/components/modals/Welcome.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Big from \"big.js\";\nimport questionMark from \"../../images/ui/expression_confused.png\";\nimport logo from \"../../images/ui/logo.png\";\nimport sunflower from \"../../images/sunflower/fruit.png\";\nimport { secondsToLongString } from \"../../utils/time\";\nimport { Panel } from \"../ui/Panel\";\nimport { Button } from \"../ui/Button\";\nimport { service } from \"../../machine\";\nimport { getMarketRate } from \"../../utils/supply\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// TODO: Hardcoded from reports, read from live API\nconst predictedDate = new Date(2021, 9, 19, 8, 44, 55);\n\nconst makeTimeLeft = () => {\n  const difference = predictedDate.getTime() - Date.now();\n  const display = secondsToLongString(difference / 1000);\n  return display;\n};\n\nexport const Welcome = _ref => {\n  _s();\n\n  let {\n    onGetStarted\n  } = _ref;\n  const [timeLeft, setTimeLeft] = React.useState(makeTimeLeft());\n  const [totalSupply, setTotalSupply] = React.useState(1);\n  React.useEffect(() => {\n    const interval = window.setInterval(() => {\n      setTimeLeft(makeTimeLeft());\n    }, 1000);\n    return () => window.clearInterval(interval);\n  }, []);\n  React.useEffect(() => {\n    const load = async () => {\n      const supply = await service.machine.context.blockChain.totalSupply();\n      setTotalSupply(supply);\n    };\n\n    load();\n  }, []);\n  const marketRate = getMarketRate(totalSupply);\n  const sunflowerPrice = Big(0.001).div(marketRate);\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"welcome\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"logo\",\n        src: logo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onGetStarted,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => window.open(\"https://docs.sunflower-farmers.com/\"),\n        children: [\"About\", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: questionMark,\n          id: \"question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-price-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"sunflower-price\",\n            src: sunflower\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"current-price\",\n            children: [\"= \", `${sunflowerPrice} $SFF`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://docs.sunflower-farmers.com/tokenomics\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"current-price-supply-demand\",\n            children: \"Read more about the supply & demand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Welcome, \"r2e5C1MKeVs8p7S1TUddnYiS4mA=\");\n\n_c = Welcome;\n\nvar _c;\n\n$RefreshReg$(_c, \"Welcome\");","map":{"version":3,"sources":["/home/jacob/Documents/Programming/myApp/src/dapp/components/modals/Welcome.tsx"],"names":["React","Big","questionMark","logo","sunflower","secondsToLongString","Panel","Button","service","getMarketRate","predictedDate","Date","makeTimeLeft","difference","getTime","now","display","Welcome","onGetStarted","timeLeft","setTimeLeft","useState","totalSupply","setTotalSupply","useEffect","interval","window","setInterval","clearInterval","load","supply","machine","context","blockChain","marketRate","sunflowerPrice","div","open"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Big from \"big.js\";\n\nimport questionMark from \"../../images/ui/expression_confused.png\";\nimport alert from \"../../images/ui/expression_alerted.png\";\nimport logo from \"../../images/ui/logo.png\";\nimport sunflower from \"../../images/sunflower/fruit.png\";\n\nimport { secondsToLongString } from \"../../utils/time\";\n\nimport { Panel } from \"../ui/Panel\";\nimport { Button } from \"../ui/Button\";\nimport { service } from \"../../machine\";\nimport { getMarketRate } from \"../../utils/supply\";\n\ninterface Props {\n  onGetStarted: () => void;\n}\n\n// TODO: Hardcoded from reports, read from live API\nconst predictedDate = new Date(2021, 9, 19, 8, 44, 55);\n\nconst makeTimeLeft = () => {\n  const difference = predictedDate.getTime() - Date.now();\n\n  const display = secondsToLongString(difference / 1000);\n  return display;\n};\n\nexport const Welcome: React.FC<Props> = ({ onGetStarted }) => {\n  const [timeLeft, setTimeLeft] = React.useState(makeTimeLeft());\n  const [totalSupply, setTotalSupply] = React.useState<number>(1);\n\n  React.useEffect(() => {\n    const interval = window.setInterval(() => {\n      setTimeLeft(makeTimeLeft());\n    }, 1000);\n\n    return () => window.clearInterval(interval);\n  }, []);\n\n  React.useEffect(() => {\n    const load = async () => {\n      const supply = await service.machine.context.blockChain.totalSupply();\n      setTotalSupply(supply);\n    };\n\n    load();\n  }, []);\n\n  const marketRate = getMarketRate(totalSupply);\n\n  const sunflowerPrice = Big(0.001).div(marketRate);\n\n  return (\n    <Panel>\n      <div id=\"welcome\">\n        <img id=\"logo\" src={logo} />\n        <Button onClick={onGetStarted}>\n          <span>Get Started</span>\n        </Button>\n        <Button\n          onClick={() => window.open(\"https://docs.sunflower-farmers.com/\")}\n        >\n          About\n          <img src={questionMark} id=\"question\" />\n        </Button>\n\n        <div>\n          <br />\n          <div className=\"current-price-container\">\n            <img className=\"sunflower-price\" src={sunflower} />\n            <span className=\"current-price\">= {`${sunflowerPrice} $SFF`}</span>\n          </div>\n          <br />\n          <a href=\"https://docs.sunflower-farmers.com/tokenomics\">\n            <h3 className=\"current-price-supply-demand\">\n              Read more about the supply & demand\n            </h3>\n          </a>\n        </div>\n      </div>\n    </Panel>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
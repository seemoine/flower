{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/Programming/myApp/src/dapp/components/ui/InventoryItems.tsx\";\nimport React from \"react\";\nimport { Box } from \"./Box\";\nimport { items } from \"../../types/crafting\";\nimport \"./Inventory.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InventoryItems = _ref => {\n  let {\n    selectedItem,\n    onSelectItem,\n    inventory\n  } = _ref;\n  const boxes = Object.keys(inventory) // Don't show tokens here\n  .filter(name => name !== \"sunflowerTokens\").map(name => {\n    const item = items.find(i => i.name === name);\n    return {\n      count: Number(inventory[name]),\n      onClick: onSelectItem ? () => onSelectItem(item) : undefined,\n      isSelected: (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.name) === item.name,\n      image: item.image,\n      disabled: !onSelectItem\n    };\n  }).filter(item => item.count > 0); // Pad array with empty boxes\n\n  for (let i = boxes.length; i < 10; i++) {\n    boxes.push({\n      disabled: true\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"inventory\",\n    children: boxes.map(box => /*#__PURE__*/_jsxDEV(Box, {\n      count: box.count,\n      onClick: box.onClick,\n      image: box.image,\n      isSelected: box.isSelected,\n      disabled: box.disabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_c = InventoryItems;\n\nvar _c;\n\n$RefreshReg$(_c, \"InventoryItems\");","map":{"version":3,"sources":["/home/jacob/Documents/Programming/myApp/src/dapp/components/ui/InventoryItems.tsx"],"names":["React","Box","items","InventoryItems","selectedItem","onSelectItem","inventory","boxes","Object","keys","filter","name","map","item","find","i","count","Number","onClick","undefined","isSelected","image","disabled","length","push","box"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAOA,SAASC,GAAT,QAAuC,OAAvC;AAEA,SAIEC,KAJF,QAOO,sBAPP;AASA,OAAO,iBAAP;;AAgBA,OAAO,MAAMC,cAA+B,GAAG,QAIzC;AAAA,MAJ0C;AAC9CC,IAAAA,YAD8C;AAE9CC,IAAAA,YAF8C;AAG9CC,IAAAA;AAH8C,GAI1C;AACJ,QAAMC,KAAiB,GAAGC,MAAM,CAACC,IAAP,CAAYH,SAAZ,EACxB;AADwB,GAEvBI,MAFuB,CAEfC,IAAD,IAAUA,IAAI,KAAK,iBAFH,EAGvBC,GAHuB,CAGlBD,IAAD,IAAU;AACb,UAAME,IAAI,GAAGX,KAAK,CAACY,IAAN,CAAYC,CAAD,IAAOA,CAAC,CAACJ,IAAF,KAAYA,IAA9B,CAAb;AAEA,WAAO;AACLK,MAAAA,KAAK,EAAEC,MAAM,CAACX,SAAS,CAACK,IAAD,CAAV,CADR;AAELO,MAAAA,OAAO,EAAEb,YAAY,GAAG,MAAMA,YAAY,CAACQ,IAAD,CAArB,GAA8BM,SAF9C;AAGLC,MAAAA,UAAU,EAAE,CAAAhB,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEO,IAAd,MAAuBE,IAAI,CAACF,IAHnC;AAILU,MAAAA,KAAK,EAAER,IAAI,CAACQ,KAJP;AAKLC,MAAAA,QAAQ,EAAE,CAACjB;AALN,KAAP;AAOD,GAbuB,EAcvBK,MAduB,CAcfG,IAAD,IAAUA,IAAI,CAACG,KAAL,GAAa,CAdP,CAA1B,CADI,CAiBJ;;AACA,OAAK,IAAID,CAAC,GAAGR,KAAK,CAACgB,MAAnB,EAA2BR,CAAC,GAAG,EAA/B,EAAmCA,CAAC,EAApC,EAAwC;AACtCR,IAAAA,KAAK,CAACiB,IAAN,CAAW;AAAEF,MAAAA,QAAQ,EAAE;AAAZ,KAAX;AACD;;AAED,sBACE;AAAK,IAAA,EAAE,EAAC,WAAR;AAAA,cACGf,KAAK,CAACK,GAAN,CAAWa,GAAD,iBACT,QAAC,GAAD;AACE,MAAA,KAAK,EAAEA,GAAG,CAACT,KADb;AAEE,MAAA,OAAO,EAAES,GAAG,CAACP,OAFf;AAGE,MAAA,KAAK,EAAEO,GAAG,CAACJ,KAHb;AAIE,MAAA,UAAU,EAAEI,GAAG,CAACL,UAJlB;AAKE,MAAA,QAAQ,EAAEK,GAAG,CAACH;AALhB;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAvCM;KAAMnB,c","sourcesContent":["import React from \"react\";\n\nimport wood from \"../../images/ui/wood.png\";\nimport stone from \"../../images/ui/rock.png\";\n\nimport { FruitItem } from \"../../types/fruits\";\n\nimport { Box, Props as BoxProps } from \"./Box\";\n\nimport {\n  Inventory,\n  Item,\n  ItemName,\n  items,\n  Recipe,\n  recipes,\n} from \"../../types/crafting\";\n\nimport \"./Inventory.css\";\nimport {\n  BlockchainEvent,\n  BlockchainState,\n  Context,\n  service,\n} from \"../../machine\";\nimport { useService } from \"@xstate/react\";\nimport { ActionableItem, isFruit } from \"../../types/contract\";\n\ninterface Props {\n  selectedItem?: ActionableItem;\n  onSelectItem?: (item: ActionableItem) => void;\n  inventory: Inventory;\n}\n\nexport const InventoryItems: React.FC<Props> = ({\n  selectedItem,\n  onSelectItem,\n  inventory,\n}) => {\n  const boxes: BoxProps[] = Object.keys(inventory)\n    // Don't show tokens here\n    .filter((name) => name !== \"sunflowerTokens\")\n    .map((name) => {\n      const item = items.find((i) => i.name === (name as ItemName));\n\n      return {\n        count: Number(inventory[name as ItemName]),\n        onClick: onSelectItem ? () => onSelectItem(item) : undefined,\n        isSelected: selectedItem?.name === item.name,\n        image: item.image,\n        disabled: !onSelectItem,\n      };\n    })\n    .filter((item) => item.count > 0);\n\n  // Pad array with empty boxes\n  for (let i = boxes.length; i < 10; i++) {\n    boxes.push({ disabled: true });\n  }\n\n  return (\n    <div id=\"inventory\">\n      {boxes.map((box) => (\n        <Box\n          count={box.count}\n          onClick={box.onClick}\n          image={box.image}\n          isSelected={box.isSelected}\n          disabled={box.disabled}\n        />\n      ))}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/Programming/myApp/src/dapp/components/farm/Reward.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport present from '../../images/decorations/treasure.png';\nimport { RewardModal } from '../ui/RewardModal';\nimport { service } from '../../machine';\nimport { useService } from '@xstate/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Reward = _ref => {\n  _s();\n\n  let {\n    account\n  } = _ref;\n  const [showModal, setShowModal] = React.useState(false);\n  const [reward, setReward] = React.useState(null);\n  const [machineState, send] = useService(service);\n  const [isCollected, setIsCollected] = React.useState(false);\n\n  const onUpgrade = () => {\n    setShowModal(true);\n  };\n\n  const onReceiveConfirm = () => {\n    setShowModal(false);\n    send('OPEN_REWARD');\n    setIsCollected(true);\n  };\n\n  React.useEffect(() => {\n    const load = async () => {\n      const reward = await machineState.context.blockChain.getReward();\n      setReward(reward);\n    };\n\n    if (account) {\n      load();\n      setIsCollected(false);\n    }\n  }, [account]);\n\n  if (!reward || isCollected) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(RewardModal, {\n      reward: reward,\n      onReceive: onReceiveConfirm,\n      onClose: () => setShowModal(false),\n      isOpen: showModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        gridColumn: '12/13',\n        gridRow: '9/10'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        id: \"present\",\n        src: present,\n        onClick: onUpgrade\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Reward, \"B6VEGElGPiC41nIwVDhKQMymroE=\", false, function () {\n  return [useService];\n});\n\n_c = Reward;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reward\");","map":{"version":3,"sources":["/home/jacob/Documents/Programming/myApp/src/dapp/components/farm/Reward.tsx"],"names":["React","present","RewardModal","service","useService","Reward","account","showModal","setShowModal","useState","reward","setReward","machineState","send","isCollected","setIsCollected","onUpgrade","onReceiveConfirm","useEffect","load","context","blockChain","getReward","gridColumn","gridRow"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAOC,OAAP,MAAoB,uCAApB;AAGA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SACIC,OADJ,QAKO,eALP;AAMA,SAASC,UAAT,QAA2B,eAA3B;;;AAMA,OAAO,MAAMC,MAAuB,GAAG,QAAiB;AAAA;;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AACpD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,KAAK,CAACS,QAAN,CAAe,KAAf,CAAlC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,KAAK,CAACS,QAAN,CAAe,IAAf,CAA5B;AACA,QAAM,CAACG,YAAD,EAAeC,IAAf,IAAuBT,UAAU,CAIrCD,OAJqC,CAAvC;AAKA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCf,KAAK,CAACS,QAAN,CAAe,KAAf,CAAtC;;AAEA,QAAMO,SAAS,GAAG,MAAM;AACpBR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMS,gBAAgB,GAAG,MAAM;AAC3BT,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAK,IAAAA,IAAI,CAAC,aAAD,CAAJ;AACAE,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GAJD;;AAMAf,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AAClB,UAAMC,IAAI,GAAG,YAAY;AACrB,YAAMT,MAAM,GAAG,MAAME,YAAY,CAACQ,OAAb,CAAqBC,UAArB,CAAgCC,SAAhC,EAArB;AACAX,MAAAA,SAAS,CAACD,MAAD,CAAT;AACH,KAHD;;AAKA,QAAIJ,OAAJ,EAAa;AACTa,MAAAA,IAAI;AAEJJ,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH;AACJ,GAXD,EAWG,CAACT,OAAD,CAXH;;AAaA,MAAI,CAACI,MAAD,IAAWI,WAAf,EAA4B;AACxB,WAAO,IAAP;AACH;;AAED,sBACI;AAAA,4BAEI,QAAC,WAAD;AAAa,MAAA,MAAM,EAAEJ,MAArB;AAA6B,MAAA,SAAS,EAAEO,gBAAxC;AAA0D,MAAA,OAAO,EAAE,MAAMT,YAAY,CAAC,KAAD,CAArF;AAA8F,MAAA,MAAM,EAAED;AAAtG;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AAAK,MAAA,KAAK,EAAE;AAAEgB,QAAAA,UAAU,EAAE,OAAd;AAAuBC,QAAAA,OAAO,EAAE;AAAhC,OAAZ;AAAA,6BACI;AAAK,QAAA,EAAE,EAAC,SAAR;AAAkB,QAAA,GAAG,EAAEvB,OAAvB;AAAgC,QAAA,OAAO,EAAEe;AAAzC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA,kBADJ;AAWH,CAhDM;;GAAMX,M;UAGoBD,U;;;KAHpBC,M","sourcesContent":["import React from 'react'\n\n\nimport present from '../../images/decorations/treasure.png'\n\n\nimport { RewardModal } from '../ui/RewardModal'\nimport {\n    service,\n    Context,\n    BlockchainEvent,\n    BlockchainState,\n} from '../../machine'\nimport { useService } from '@xstate/react'\n\ninterface Props {\n    account: string\n}\n\nexport const Reward: React.FC<Props> = ({ account }) => {\n    const [showModal, setShowModal] = React.useState(false)\n    const [reward, setReward] = React.useState(null)\n    const [machineState, send] = useService<\n        Context,\n        BlockchainEvent,\n        BlockchainState\n    >(service)\n    const [isCollected, setIsCollected] = React.useState(false)\n\n    const onUpgrade = () => {\n        setShowModal(true)\n    }\n\n    const onReceiveConfirm = () => {\n        setShowModal(false)\n        send('OPEN_REWARD')\n        setIsCollected(true)\n    }\n\n    React.useEffect(() => {\n        const load = async () => {\n            const reward = await machineState.context.blockChain.getReward()\n            setReward(reward)\n        }\n\n        if (account) {\n            load()\n\n            setIsCollected(false)\n        }\n    }, [account])\n\n    if (!reward || isCollected) {\n        return null\n    }\n\n    return (\n        <>\n\n            <RewardModal reward={reward} onReceive={onReceiveConfirm} onClose={() => setShowModal(false)} isOpen={showModal}/>\n\n            {/* Present */}\n            <div style={{ gridColumn: '12/13', gridRow: '9/10'}}>\n                <img id='present' src={present} onClick={onUpgrade} />\n            </div>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Web3 from \"web3\";\nimport Token from \"../abis/Token.json\";\nimport Farm from \"../abis/Farm.json\";\nimport CommunityCrafting from \"../abis/CommunityCrafting.json\";\nimport Chicken from \"../abis/Chicken.json\";\nimport QuickSwap from \"../abis/QuickSwapRouter.json\";\nimport { Charity, Fruit } from \"./types/contract\";\nimport { items, DEFAULT_INVENTORY } from \"./types/crafting\";\nimport { onboarded } from \"./utils/localStorage\";\nimport { getUpgradePrice } from \"./utils/land\";\nexport const MINIMUM_GAS_PRICE = 40;\nconst SAVE_OFFSET_SECONDS = 5;\nexport const COMMUNITY_CRAFTING_ADDRESS = \"0x248b3f1ead0aB11A975c55A6ed8c690B5E5A10d1\";\nexport class BlockChain {\n  constructor() {\n    this.web3 = null;\n    this.token = null;\n    this.alchemyToken = null;\n    this.farm = null;\n    this.quickswap = null;\n    this.communityCrafting = null;\n    this.chickens = null;\n    this.alchemyFarm = null;\n    this.account = null;\n    this.details = null;\n    this.inventory = null;\n    this.totalItemSupplies = null;\n    this.stoneStrength = 0;\n    this.ironStrength = 0;\n    this.goldStrength = 0;\n    this.woodStrength = 0;\n    this.eggCollectionTime = 0;\n    this.events = [];\n    this.contracts = void 0;\n    this.saveCount = 0;\n    this.isTrialAccount = false;\n    this.oldInventory = null;\n    this.cachedTotalSupply = 0;\n  }\n\n  async connectToMatic() {\n    try {\n      this.token = new this.web3.eth.Contract(Token, \"0xdf9B4b57865B403e08c85568442f95c26b7896b0\");\n      this.farm = new this.web3.eth.Contract(Farm, \"0x6e5Fa679211d7F6b54e14E187D34bA547c5d3fe0\");\n      this.chickens = new this.web3.eth.Contract(Chicken, \"0xf0F1Cc9192ca0064EB3D35e0DE1CE5e56572ecab\");\n      this.quickswap = new this.web3.eth.Contract(QuickSwap, \"0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff\");\n      this.communityCrafting = new this.web3.eth.Contract(CommunityCrafting, COMMUNITY_CRAFTING_ADDRESS);\n      const maticAccounts = await this.web3.eth.getAccounts();\n      this.account = maticAccounts[0];\n      this.contracts = items.filter(item => !!item.abi).reduce((contracts, item) => ({ ...contracts,\n        [item.name]: new this.web3.eth.Contract(item.abi, item.address)\n      }), {});\n      this.alchemyToken = new this.web3.eth.Contract(Token, \"0xdf9B4b57865B403e08c85568442f95c26b7896b0\");\n      this.alchemyFarm = new this.web3.eth.Contract(Farm, \"0x6e5Fa679211d7F6b54e14E187D34bA547c5d3fe0\");\n    } catch (e) {\n      // Timeout, retry\n      if (e.code === \"-32005\") {\n        console.error(\"Retrying...\");\n        await new Promise(res => window.setTimeout(res, 3000));\n      } else {\n        console.error(e);\n        throw e;\n      }\n    }\n  }\n\n  get isConnected() {\n    return this.isTrial || !!this.farm;\n  }\n\n  get hasFarm() {\n    return this.details && this.details.farm.length > 0;\n  }\n\n  get myFarm() {\n    return this.details;\n  }\n\n  async setupWeb3() {\n    if (window.ethereum) {\n      try {\n        // Request account access if needed\n        await window.ethereum.enable();\n        this.web3 = new Web3(window.ethereum);\n      } catch (error) {\n        // User denied account access...\n        console.error(error);\n      }\n    } else if (window.web3) {\n      this.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      throw new Error(\"NO_WEB3\");\n    }\n  }\n\n  async initialise() {\n    let retryCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.saveCount = 0;\n\n    try {\n      // It is actually quite fast, we won't to simulate slow loading to convey complexity\n      await new Promise(res => window.setTimeout(res, 1000));\n      await this.setupWeb3();\n      this.oldInventory = null;\n      const chainId = await this.web3.eth.getChainId();\n\n      if (chainId === 137) {\n        await this.connectToMatic();\n        await this.loadFarm();\n      } else {\n        throw new Error(\"WRONG_CHAIN\");\n      }\n\n      console.log(\"Resolved\");\n    } catch (e) {\n      // If it is not a known error, keep trying\n      if (retryCount < 3 && e.message !== \"WRONG_CHAIN\" && e.message !== \"NO_WEB3\") {\n        console.log(\"Try again\");\n        await new Promise(res => setTimeout(res, 2000));\n        return this.initialise(retryCount + 1);\n      }\n\n      console.error(e);\n      throw e;\n    }\n  }\n\n  async loadFarm() {\n    const [account, inventory, itemSupplies, tree, stone, iron, gold, hatchTime] = await Promise.all([this.getAccount(), this.loadInventory(), this.loadTotalItemSupplies(), this.loadTreeStrength(), this.loadStoneStrength(), this.loadIronStrength(), this.loadGoldStrength(), this.loadEggCollectionTime()]);\n    this.details = account;\n    this.inventory = inventory;\n    this.totalItemSupplies = itemSupplies;\n    this.woodStrength = tree;\n    this.stoneStrength = stone;\n    this.ironStrength = iron;\n    this.goldStrength = gold;\n    this.eggCollectionTime = hatchTime;\n    await this.cacheTotalSupply();\n  }\n\n  async waitForFarm() {\n    let retryCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const wait = retryCount * 1000;\n    await new Promise(res => setTimeout(res, wait));\n    const farm = await this.farm.methods.getLand(this.account).call({\n      from: this.account\n    });\n\n    if (!farm || !farm.length) {\n      await this.waitForFarm(retryCount + 1);\n    }\n  }\n\n  async createFarm(donation) {\n    const value = this.web3.utils.toWei(donation.value, \"ether\");\n    await new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate();\n      this.farm.methods.createFarm(donation.charity).send({\n        from: this.account,\n        value,\n        to: donation.charity,\n        gasPrice\n      }).on(\"error\", function (error) {\n        console.log({\n          error\n        });\n        reject(error);\n      }).on(\"transactionHash\", function (transactionHash) {\n        console.log({\n          transactionHash\n        });\n      }).on(\"receipt\", async function (receipt) {\n        console.log({\n          receipt\n        });\n        resolve(receipt);\n      });\n    });\n    await this.waitForFarm();\n    await this.loadFarm();\n  }\n\n  async save() {\n    const blockChain = this;\n\n    if (this.isTrial) {\n      throw new Error(\"TRIAL_MODE\");\n    } // If this is second save, put a buffer between the saves to ensure blockchain state does overlap\n\n\n    if (this.saveCount > 0) {\n      await new Promise(res => setTimeout(res, 1000 * SAVE_OFFSET_SECONDS));\n    } else {\n      // First save\n      // For each event, subtract 5 seconds to ensure we are not ahead of the Blockchain timestamp\n      this.events = this.events.map(event => ({ ...event,\n        createdAt: event.createdAt - SAVE_OFFSET_SECONDS\n      }));\n    }\n\n    await new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate();\n      console.log(new Date().getTime());\n      console.log({\n        events: this.events\n      });\n      console.log({\n        farm: this.myFarm\n      });\n      this.farm.methods.sync(this.events).send({\n        from: this.account,\n        gasPrice\n      }).on(\"error\", function (error) {\n        console.log({\n          error\n        }); // User rejected\n\n        if (error.code === 4001) {\n          return resolve(null);\n        }\n\n        reject(error);\n      }).on(\"transactionHash\", function (transactionHash) {\n        console.log({\n          transactionHash\n        });\n      }).on(\"receipt\", function (receipt) {\n        console.log({\n          receipt\n        });\n        blockChain.events = [];\n        resolve(receipt);\n      });\n    });\n    onboarded();\n    this.saveCount += 1;\n  }\n\n  async estimate() {\n    let incr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    const e = await this.web3.eth.getGasPrice();\n    let gasPrice = e ? Number(e) * incr : undefined;\n    const minimum = MINIMUM_GAS_PRICE * 1000000000;\n\n    if (!gasPrice || gasPrice < minimum) {\n      gasPrice = minimum;\n    }\n\n    console.log({\n      gasPrice\n    });\n    return gasPrice;\n  }\n\n  async levelUp() {\n    if (this.isTrial) {\n      throw new Error(\"TRIAL_MODE\");\n    }\n\n    await new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate();\n      this.farm.methods.levelUp().send({\n        from: this.account,\n        gasPrice\n      }).on(\"error\", function (error) {\n        console.log({\n          error\n        }); // User rejected\n\n        if (error.code === 4001) {\n          return resolve(null);\n        }\n\n        reject(error);\n      }).on(\"transactionHash\", function (transactionHash) {\n        console.log({\n          transactionHash\n        });\n      }).on(\"receipt\", async function (receipt) {\n        console.log({\n          receipt\n        });\n        resolve(receipt);\n      });\n    });\n    const price = getUpgradePrice({\n      totalSupply: this.totalSupply(),\n      farmSize: this.details.farm.length\n    });\n    this.details = { ...this.details,\n      balance: this.details.balance - price,\n      farm: [...this.details.farm, {\n        createdAt: 0,\n        fruit: Fruit.Sunflower\n      }, {\n        createdAt: 0,\n        fruit: Fruit.Sunflower\n      }, {\n        createdAt: 0,\n        fruit: Fruit.Sunflower\n      }]\n    };\n  }\n\n  async getAccount() {\n    if (!this.web3 || this.isTrial) {\n      return {\n        farm: [{\n          createdAt: 0,\n          fruit: Fruit.None\n        }, {\n          createdAt: 0,\n          fruit: Fruit.Sunflower\n        }, {\n          createdAt: 0,\n          fruit: Fruit.Sunflower\n        }, {\n          createdAt: 0,\n          fruit: Fruit.Sunflower\n        }, {\n          createdAt: 0,\n          fruit: Fruit.None\n        }],\n        balance: 0,\n        id: this.account\n      };\n    }\n\n    const rawBalance = await this.alchemyToken.methods.balanceOf(this.account).call({\n      from: this.account\n    });\n    const farm = await this.alchemyFarm.methods.getLand(this.account).call({\n      from: this.account\n    });\n    const balance = this.web3.utils.fromWei(rawBalance.toString());\n    console.log({\n      balance\n    });\n    return {\n      balance: Number(balance),\n      farm,\n      id: this.account\n    };\n  }\n\n  async craft(_ref) {\n    let {\n      recipe,\n      amount\n    } = _ref;\n    const blockChain = this;\n\n    if (this.isTrial) {\n      throw new Error(\"TRIAL_MODE\");\n    }\n\n    this.oldInventory = this.inventory;\n    console.log({\n      recipe,\n      amount\n    }); // ERC20 tokens are fractionalized so we need to multiply by 10^18 to get 1 whole one\n\n    const mintAmount = recipe.type === \"NFT\" ? amount : this.web3.utils.toWei(amount.toString(), \"ether\");\n    await new Promise(async (resolve, reject) => {\n      this.farm.methods.craft(recipe.address, mintAmount).send({\n        from: this.account\n      }).on(\"error\", function (error) {\n        console.log({\n          error\n        }); // User rejected\n\n        if (error.code === 4001) {\n          return resolve(null);\n        }\n\n        reject(error);\n      }).on(\"transactionHash\", function (transactionHash) {\n        console.log({\n          transactionHash\n        });\n      }).on(\"receipt\", function (receipt) {\n        console.log({\n          receipt\n        });\n        blockChain.events = [];\n        resolve(receipt);\n      });\n    });\n    this.inventory[recipe.name] += amount;\n    recipe.ingredients.forEach(ingredient => {\n      if (ingredient.name === \"$SFF\") {\n        this.details = { ...this.details,\n          balance: this.details.balance - ingredient.amount * amount\n        };\n      } else {\n        this.inventory[ingredient.name] -= ingredient.amount * amount;\n      }\n    });\n  }\n\n  async communityCraft(_ref2) {\n    let {\n      recipe,\n      amount,\n      eth = 0\n    } = _ref2;\n    const blockChain = this;\n\n    if (this.isTrial) {\n      throw new Error(\"TRIAL_MODE\");\n    }\n\n    this.oldInventory = this.inventory;\n    console.log({\n      recipe,\n      amount\n    });\n    const value = this.web3.utils.toWei(eth.toString(), \"ether\");\n    const gasPrice = await this.estimate(2);\n    await new Promise(async (resolve, reject) => {\n      this.communityCrafting.methods.craft(recipe.address).send({\n        from: this.account,\n        value,\n        gasPrice\n      }).on(\"error\", function (error) {\n        console.log({\n          error\n        }); // User rejected\n\n        if (error.code === 4001) {\n          return resolve(null);\n        }\n\n        reject(error);\n      }).on(\"transactionHash\", function (transactionHash) {\n        console.log({\n          transactionHash\n        });\n      }).on(\"receipt\", function (receipt) {\n        console.log({\n          receipt\n        });\n        blockChain.events = [];\n        resolve(receipt);\n      });\n    });\n    this.inventory[recipe.name] += amount;\n    recipe.ingredients.forEach(ingredient => {\n      if (ingredient.name === \"$SFF\") {\n        this.details = { ...this.details,\n          balance: this.details.balance - ingredient.amount * amount\n        };\n      } else {\n        this.inventory[ingredient.name] -= ingredient.amount * amount;\n      }\n    });\n  }\n\n  /**\n   * ALWAYS ENSURE THAT A RESOURCE CONTRACT DOES NOT HAVE A PUBLIC MINT!\n   * A resource can only be gained through a \"stake\"\n   */\n  async stake(_ref3) {\n    let {\n      resource,\n      amount\n    } = _ref3;\n    const blockChain = this;\n\n    if (this.isTrial) {\n      throw new Error(\"TRIAL_MODE\");\n    } // Save old inventory for comparison\n\n\n    this.oldInventory = this.inventory;\n    console.log({\n      resource,\n      amount\n    });\n    const gwei = this.web3.utils.toWei(amount.toString(), \"ether\");\n    await new Promise(async (resolve, reject) => {\n      this.farm.methods.stake(resource, gwei).send({\n        from: this.account\n      }).on(\"error\", function (error) {\n        console.log({\n          error\n        }); // User rejected\n\n        if (error.code === 4001) {\n          return resolve(null);\n        }\n\n        reject(error);\n      }).on(\"transactionHash\", function (transactionHash) {\n        console.log({\n          transactionHash\n        });\n      }).on(\"receipt\", function (receipt) {\n        console.log({\n          receipt\n        });\n        blockChain.events = [];\n        resolve(receipt);\n      });\n    }); // TODO fix - Polygon data is stale so use this - We are waiting an extra 20 seconds\n\n    await new Promise(res => setTimeout(res, 20 * 1000));\n    await this.loadFarm();\n  }\n\n  async getMarketConversion() {\n    return await this.farm.methods.getMarketPrice(1).call({\n      from: this.account\n    });\n  }\n\n  getWeb3() {\n    return this.web3;\n  }\n\n  addEvent(event) {\n    this.events = [...this.events, event];\n  }\n\n  isUnsaved() {\n    return this.events.length > 0;\n  }\n\n  get isTrial() {\n    return this.isTrialAccount;\n  }\n\n  startTrialMode() {\n    this.isTrialAccount = true;\n  }\n\n  endTrialMode() {\n    this.isTrialAccount = false;\n  }\n\n  lastSaved() {\n    if (this.events.length === 0) {\n      return null;\n    }\n\n    return this.events[0].createdAt;\n  }\n\n  async cacheTotalSupply() {\n    if (!this.web3 || !this.alchemyToken) {\n      this.cachedTotalSupply = 0;\n    }\n\n    const totalSupply = await this.alchemyToken.methods.totalSupply().call({\n      from: this.account\n    });\n    const supply = this.web3.utils.fromWei(totalSupply);\n    this.cachedTotalSupply = Number(supply);\n  }\n\n  totalSupply() {\n    return this.cachedTotalSupply;\n  }\n\n  async getCharityBalances() {\n    const coolEarth = this.web3.eth.getBalance(Charity.CoolEarth);\n    const waterProject = this.web3.eth.getBalance(Charity.TheWaterProject);\n    const heifer = this.web3.eth.getBalance(Charity.Heifer);\n    const [coolEarthBalance, waterBalance, heiferBalance] = await Promise.all([coolEarth, waterProject, heifer]);\n    return {\n      coolEarthBalance: this.web3.utils.fromWei(coolEarthBalance, \"ether\"),\n      waterBalance: this.web3.utils.fromWei(waterBalance, \"ether\"),\n      heiferBalance: this.web3.utils.fromWei(heiferBalance, \"ether\")\n    };\n  } // Used when a player did not save in time\n\n\n  offsetTime() {\n    const latestTime = this.events[this.events.length - 1];\n    const now = Math.floor(Date.now() / 1000);\n    const difference = now - latestTime.createdAt; // For each event, add the time\n\n    this.events = this.events.map(event => ({ ...event,\n      createdAt: event.createdAt + difference\n    }));\n  }\n\n  resetFarm() {\n    this.events = [];\n  }\n\n  async getReward() {\n    try {\n      const reward = await this.farm.methods.myReward().call({\n        from: this.account\n      });\n\n      if (!reward) {\n        return 0;\n      }\n\n      const converted = this.web3.utils.fromWei(reward.toString());\n      return Number(converted);\n    } catch (e) {\n      // No reward ready\n      return null;\n    }\n  }\n\n  async receiveReward() {\n    const reward = await this.getReward();\n    await new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate(2);\n      this.farm.methods.receiveReward().send({\n        from: this.account,\n        gasPrice\n      }).on(\"error\", function (error) {\n        console.log({\n          error\n        }); // User rejected\n\n        if (error.code === 4001) {\n          return resolve(null);\n        }\n\n        reject(error);\n      }).on(\"transactionHash\", function (transactionHash) {\n        console.log({\n          transactionHash\n        });\n      }).on(\"receipt\", function (receipt) {\n        console.log({\n          receipt\n        });\n        resolve(receipt);\n      });\n    });\n    this.details = { ...this.details,\n      balance: this.details.balance + reward\n    };\n  }\n\n  async collectEggs() {\n    await new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate(2);\n      this.chickens.methods.collectEggs().send({\n        from: this.account,\n        gasPrice\n      }).on(\"error\", function (error) {\n        console.log({\n          error\n        }); // User rejected\n\n        if (error.code === 4001) {\n          return resolve(null);\n        }\n\n        reject(error);\n      }).on(\"transactionHash\", function (transactionHash) {\n        console.log({\n          transactionHash\n        });\n      }).on(\"receipt\", function (receipt) {\n        console.log({\n          receipt\n        });\n        resolve(receipt);\n      });\n    });\n    const chickens = this.inventory.Chicken;\n\n    if (this.inventory[\"Chicken coop\"] > 0) {\n      this.inventory.Egg += chickens * 3;\n    } else {\n      this.inventory.Egg += chickens;\n    }\n\n    this.eggCollectionTime = Date.now() / 1000;\n  } // Sunflower Tokens -> MATIC\n\n\n  async quickswapRate() {\n    const base = 10000000000;\n    const rate = await this.quickswap.methods.getAmountsIn(base, [\"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\", \"0xdf9B4b57865B403e08c85568442f95c26b7896b0\"]).call({\n      from: this.account\n    });\n    return Number(rate[0]) / Number(rate[1]);\n  }\n\n  async approve(address, amount) {\n    const alreadyApproved = await this.token.methods.allowance(this.account, address).call({\n      from: this.account\n    });\n    const wei = this.web3.utils.toWei(amount.toString(), \"ether\");\n\n    if (Number(alreadyApproved) >= Number(wei)) {\n      return true;\n    }\n\n    return new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate(2);\n\n      try {\n        this.token.methods.approve(address, wei).send({\n          from: this.account,\n          gasPrice\n        }).on(\"error\", function (error) {\n          console.log({\n            error\n          });\n          reject(error);\n        }).on(\"transactionHash\", function (transactionHash) {\n          console.log({\n            transactionHash\n          });\n        }).on(\"receipt\", function (receipt) {\n          console.log({\n            receipt\n          });\n          resolve(receipt);\n        });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async loadInventory() {\n    // Call balanceOf on each item\n    const itemBalancesPromise = Object.values(this.contracts).map(contract => contract.methods.balanceOf(this.account).call({\n      from: this.account\n    }));\n    const itemBalances = await Promise.all(itemBalancesPromise);\n    console.log({\n      itemBalances\n    });\n    const values = Object.keys(this.contracts).reduce((itemValues, itemName, index) => {\n      const isNFT = items.find(item => item.name === itemName).type === \"NFT\";\n      const balance = itemBalances[index];\n      return { ...itemValues,\n        [itemName]: isNFT ? Number(balance) : Math.ceil(Number(this.web3.utils.fromWei(balance)))\n      };\n    }, {});\n    console.log({\n      inventory: values\n    });\n    return values;\n  }\n\n  async loadTotalItemSupplies() {\n    // Call totalSupply on each item\n    const itemSupplyPromise = Object.values(this.contracts).map(contract => contract.methods.totalSupply().call({\n      from: this.account\n    }));\n    const itemTotalSupplies = await Promise.all(itemSupplyPromise);\n    const values = Object.keys(this.contracts).reduce((itemValues, itemName, index) => ({ ...itemValues,\n      [itemName]: itemTotalSupplies[index]\n    }), {});\n    console.log({\n      values\n    });\n    return values;\n  }\n\n  getInventory() {\n    return this.inventory;\n  }\n\n  getTotalItemSupplies() {\n    return this.totalItemSupplies;\n  }\n\n  getInventoryChange() {\n    if (!this.oldInventory) {\n      return DEFAULT_INVENTORY;\n    } // Calculate the difference since we last synced with the blockchain\n\n\n    const changes = items.reduce((change, item) => ({ ...change,\n      [item.name]: this.inventory[item.name] - this.oldInventory[item.name]\n    }), {});\n    return { ...changes\n    };\n  }\n\n  async loadTreeStrength() {\n    const strength = await this.contracts.Wood.methods.getAvailable(this.account).call({\n      from: this.account\n    });\n    return Number(this.web3.utils.fromWei(strength));\n  }\n\n  async loadStoneStrength() {\n    const strength = await this.contracts.Stone.methods.getAvailable(this.account).call({\n      from: this.account\n    });\n    return Number(this.web3.utils.fromWei(strength));\n  }\n\n  async loadIronStrength() {\n    const strength = await this.contracts.Iron.methods.getAvailable(this.account).call({\n      from: this.account\n    });\n    return Number(this.web3.utils.fromWei(strength));\n  }\n\n  async loadGoldStrength() {\n    const strength = await this.contracts.Gold.methods.getAvailable(this.account).call({\n      from: this.account\n    });\n    return Number(this.web3.utils.fromWei(strength));\n  }\n\n  async loadEggCollectionTime() {\n    const time = await this.chickens.methods.hatchTime(this.account).call({\n      from: this.account\n    });\n    return Number(time);\n  }\n\n  async getTreeStrength() {\n    console.log({\n      ws: this.woodStrength\n    });\n    return this.woodStrength;\n  }\n\n  async getStoneStrength() {\n    return this.stoneStrength;\n  }\n\n  async getIronStrength() {\n    return this.ironStrength;\n  }\n\n  async getGoldStrength() {\n    return this.goldStrength;\n  }\n\n  async getEggCollectionTime() {\n    return this.eggCollectionTime;\n  }\n\n}","map":{"version":3,"sources":["/home/jacob/Documents/Programming/myApp/src/dapp/Blockchain.ts"],"names":["Web3","Token","Farm","CommunityCrafting","Chicken","QuickSwap","Charity","Fruit","items","DEFAULT_INVENTORY","onboarded","getUpgradePrice","MINIMUM_GAS_PRICE","SAVE_OFFSET_SECONDS","COMMUNITY_CRAFTING_ADDRESS","BlockChain","web3","token","alchemyToken","farm","quickswap","communityCrafting","chickens","alchemyFarm","account","details","inventory","totalItemSupplies","stoneStrength","ironStrength","goldStrength","woodStrength","eggCollectionTime","events","contracts","saveCount","isTrialAccount","oldInventory","cachedTotalSupply","connectToMatic","eth","Contract","maticAccounts","getAccounts","filter","item","abi","reduce","name","address","e","code","console","error","Promise","res","window","setTimeout","isConnected","isTrial","hasFarm","length","myFarm","setupWeb3","ethereum","enable","currentProvider","Error","initialise","retryCount","chainId","getChainId","loadFarm","log","message","itemSupplies","tree","stone","iron","gold","hatchTime","all","getAccount","loadInventory","loadTotalItemSupplies","loadTreeStrength","loadStoneStrength","loadIronStrength","loadGoldStrength","loadEggCollectionTime","cacheTotalSupply","waitForFarm","wait","methods","getLand","call","from","createFarm","donation","value","utils","toWei","resolve","reject","gasPrice","estimate","charity","send","to","on","transactionHash","receipt","save","blockChain","map","event","createdAt","Date","getTime","sync","incr","getGasPrice","Number","undefined","minimum","levelUp","price","totalSupply","farmSize","balance","fruit","Sunflower","None","id","rawBalance","balanceOf","fromWei","toString","craft","recipe","amount","mintAmount","type","ingredients","forEach","ingredient","communityCraft","stake","resource","gwei","getMarketConversion","getMarketPrice","getWeb3","addEvent","isUnsaved","startTrialMode","endTrialMode","lastSaved","supply","getCharityBalances","coolEarth","getBalance","CoolEarth","waterProject","TheWaterProject","heifer","Heifer","coolEarthBalance","waterBalance","heiferBalance","offsetTime","latestTime","now","Math","floor","difference","resetFarm","getReward","reward","myReward","converted","receiveReward","collectEggs","Egg","quickswapRate","base","rate","getAmountsIn","approve","alreadyApproved","allowance","wei","itemBalancesPromise","Object","values","contract","itemBalances","keys","itemValues","itemName","index","isNFT","find","ceil","itemSupplyPromise","itemTotalSupplies","getInventory","getTotalItemSupplies","getInventoryChange","changes","change","strength","Wood","getAvailable","Stone","Iron","Gold","time","getTreeStrength","ws","getStoneStrength","getIronStrength","getGoldStrength","getEggCollectionTime"],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\n\nimport Token from \"../abis/Token.json\";\nimport Farm from \"../abis/Farm.json\";\nimport CommunityCrafting from \"../abis/CommunityCrafting.json\";\nimport Chicken from \"../abis/Chicken.json\";\nimport QuickSwap from \"../abis/QuickSwapRouter.json\";\n\nimport {\n  Transaction,\n  Square,\n  Charity,\n  Fruit,\n  Donation,\n} from \"./types/contract\";\nimport {\n  Inventory,\n  ItemName,\n  Recipe,\n  items,\n  DEFAULT_INVENTORY,\n} from \"./types/crafting\";\nimport { onboarded } from \"./utils/localStorage\";\nimport { getUpgradePrice } from \"./utils/land\";\n\ninterface Account {\n  farm: Square[];\n  balance: number;\n  id: string;\n}\n\ntype Contracts = Record<ItemName, any>;\n\nexport const MINIMUM_GAS_PRICE = 40;\nconst SAVE_OFFSET_SECONDS = 5;\nexport const COMMUNITY_CRAFTING_ADDRESS =\n  \"0x248b3f1ead0aB11A975c55A6ed8c690B5E5A10d1\";\n\nexport class BlockChain {\n  private web3: Web3 | null = null;\n  private token: any | null = null;\n  private alchemyToken: any | null = null;\n  private farm: any | null = null;\n  private quickswap: any | null = null;\n  private communityCrafting: any | null = null;\n  private chickens: any | null = null;\n  private alchemyFarm: any | null = null;\n  private account: string | null = null;\n\n  private details: Account = null;\n  private inventory: Inventory = null;\n  private totalItemSupplies: Inventory = null;\n  private stoneStrength: number = 0;\n  private ironStrength: number = 0;\n  private goldStrength: number = 0;\n  private woodStrength: number = 0;\n  private eggCollectionTime: number = 0;\n\n  private events: Transaction[] = [];\n\n  private contracts: Contracts;\n\n  private saveCount: number = 0;\n\n  private isTrialAccount: boolean = false;\n  private async connectToMatic() {\n    try {\n      this.token = new this.web3.eth.Contract(\n        Token as any,\n        \"0xdf9B4b57865B403e08c85568442f95c26b7896b0\"\n      );\n      this.farm = new this.web3.eth.Contract(\n        Farm as any,\n        \"0x6e5Fa679211d7F6b54e14E187D34bA547c5d3fe0\"\n      );\n      this.chickens = new this.web3.eth.Contract(\n        Chicken as any,\n        \"0xf0F1Cc9192ca0064EB3D35e0DE1CE5e56572ecab\"\n      );\n      this.quickswap = new this.web3.eth.Contract(\n        QuickSwap as any,\n        \"0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff\"\n      );\n      this.communityCrafting = new this.web3.eth.Contract(\n        CommunityCrafting as any,\n        COMMUNITY_CRAFTING_ADDRESS\n      );\n      const maticAccounts = await this.web3.eth.getAccounts();\n      this.account = maticAccounts[0];\n\n      this.contracts = items\n        .filter((item) => !!item.abi)\n        .reduce(\n          (contracts, item) => ({\n            ...contracts,\n            [item.name]: new this.web3.eth.Contract(\n              item.abi as any,\n              item.address\n            ),\n          }),\n          {} as Contracts\n        );\n\n      this.alchemyToken = new this.web3.eth.Contract(\n        Token as any,\n        \"0xdf9B4b57865B403e08c85568442f95c26b7896b0\"\n      );\n      this.alchemyFarm = new this.web3.eth.Contract(\n        Farm as any,\n        \"0x6e5Fa679211d7F6b54e14E187D34bA547c5d3fe0\"\n      );\n    } catch (e) {\n      // Timeout, retry\n      if (e.code === \"-32005\") {\n        console.error(\"Retrying...\");\n        await new Promise((res) => window.setTimeout(res, 3000));\n      } else {\n        console.error(e);\n        throw e;\n      }\n    }\n  }\n\n  public get isConnected() {\n    return this.isTrial || !!this.farm;\n  }\n\n  public get hasFarm() {\n    return this.details && this.details.farm.length > 0;\n  }\n\n  public get myFarm() {\n    return this.details;\n  }\n\n  private async setupWeb3() {\n    if ((window as any).ethereum) {\n      try {\n        // Request account access if needed\n        await (window as any).ethereum.enable();\n        this.web3 = new Web3((window as any).ethereum);\n      } catch (error) {\n        // User denied account access...\n        console.error(error);\n      }\n    } else if ((window as any).web3) {\n      this.web3 = new Web3((window as any).web3.currentProvider);\n    } else {\n      throw new Error(\"NO_WEB3\");\n    }\n  }\n\n  public async initialise(retryCount = 0) {\n    this.saveCount = 0;\n\n    try {\n      // It is actually quite fast, we won't to simulate slow loading to convey complexity\n      await new Promise((res) => window.setTimeout(res, 1000));\n      await this.setupWeb3();\n      this.oldInventory = null;\n      const chainId = await this.web3.eth.getChainId();\n\n      if (chainId === 137) {\n        await this.connectToMatic();\n\n        await this.loadFarm();\n      } else {\n        throw new Error(\"WRONG_CHAIN\");\n      }\n\n      console.log(\"Resolved\");\n    } catch (e) {\n      // If it is not a known error, keep trying\n      if (\n        retryCount < 3 &&\n        e.message !== \"WRONG_CHAIN\" &&\n        e.message !== \"NO_WEB3\"\n      ) {\n        console.log(\"Try again\");\n        await new Promise((res) => setTimeout(res, 2000));\n\n        return this.initialise(retryCount + 1);\n      }\n      console.error(e);\n      throw e;\n    }\n  }\n\n  public async loadFarm() {\n    const [\n      account,\n      inventory,\n      itemSupplies,\n      tree,\n      stone,\n      iron,\n      gold,\n      hatchTime,\n    ] = await Promise.all([\n      this.getAccount(),\n      this.loadInventory(),\n      this.loadTotalItemSupplies(),\n      this.loadTreeStrength(),\n      this.loadStoneStrength(),\n      this.loadIronStrength(),\n      this.loadGoldStrength(),\n      this.loadEggCollectionTime(),\n    ]);\n    this.details = account;\n    this.inventory = inventory;\n    this.totalItemSupplies = itemSupplies;\n    this.woodStrength = tree;\n    this.stoneStrength = stone;\n    this.ironStrength = iron;\n    this.goldStrength = gold;\n    this.eggCollectionTime = hatchTime;\n\n    await this.cacheTotalSupply();\n  }\n\n  private async waitForFarm(retryCount: number = 1) {\n    const wait = retryCount * 1000;\n    await new Promise((res) => setTimeout(res, wait));\n    const farm = await this.farm.methods\n      .getLand(this.account)\n      .call({ from: this.account });\n\n    if (!farm || !farm.length) {\n      await this.waitForFarm(retryCount + 1);\n    }\n  }\n\n  public async createFarm(donation: Donation) {\n    const value = this.web3.utils.toWei(donation.value, \"ether\");\n\n    await new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate();\n\n      this.farm.methods\n        .createFarm(donation.charity)\n        .send({\n          from: this.account,\n          value,\n          to: donation.charity,\n          gasPrice,\n        })\n        .on(\"error\", function (error) {\n          console.log({ error });\n          reject(error);\n        })\n        .on(\"transactionHash\", function (transactionHash) {\n          console.log({ transactionHash });\n        })\n        .on(\"receipt\", async function (receipt) {\n          console.log({ receipt });\n          resolve(receipt);\n        });\n    });\n\n    await this.waitForFarm();\n\n    await this.loadFarm();\n  }\n\n  public async save() {\n    const blockChain = this;\n\n    if (this.isTrial) {\n      throw new Error(\"TRIAL_MODE\");\n    }\n\n    // If this is second save, put a buffer between the saves to ensure blockchain state does overlap\n    if (this.saveCount > 0) {\n      await new Promise((res) =>\n        setTimeout(res, 1000 * SAVE_OFFSET_SECONDS)\n      );\n    } else {\n      // First save\n      // For each event, subtract 5 seconds to ensure we are not ahead of the Blockchain timestamp\n      this.events = this.events.map((event) => ({\n        ...event,\n        createdAt: event.createdAt - SAVE_OFFSET_SECONDS,\n      }));\n    }\n\n    await new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate();\n\n      console.log(new Date().getTime());\n      console.log({ events: this.events });\n      console.log({ farm: this.myFarm });\n      this.farm.methods\n        .sync(this.events)\n        .send({ from: this.account, gasPrice })\n        .on(\"error\", function (error) {\n          console.log({ error });\n\n          // User rejected\n          if (error.code === 4001) {\n            return resolve(null);\n          }\n\n          reject(error);\n        })\n        .on(\"transactionHash\", function (transactionHash) {\n          console.log({ transactionHash });\n        })\n        .on(\"receipt\", function (receipt) {\n          console.log({ receipt });\n          blockChain.events = [];\n          resolve(receipt);\n        });\n    });\n\n    onboarded();\n    this.saveCount += 1;\n  }\n\n  public async estimate(incr = 1) {\n    const e = await this.web3.eth.getGasPrice();\n    let gasPrice = e ? Number(e) * incr : undefined;\n    const minimum = MINIMUM_GAS_PRICE * 1000000000;\n    if (!gasPrice || gasPrice < minimum) {\n      gasPrice = minimum;\n    }\n    console.log({ gasPrice });\n    return gasPrice;\n  }\n\n  public async levelUp() {\n    if (this.isTrial) {\n      throw new Error(\"TRIAL_MODE\");\n    }\n\n    await new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate();\n\n      this.farm.methods\n        .levelUp()\n        .send({ from: this.account, gasPrice })\n        .on(\"error\", function (error) {\n          console.log({ error });\n          // User rejected\n          if (error.code === 4001) {\n            return resolve(null);\n          }\n          reject(error);\n        })\n        .on(\"transactionHash\", function (transactionHash) {\n          console.log({ transactionHash });\n        })\n        .on(\"receipt\", async function (receipt) {\n          console.log({ receipt });\n          resolve(receipt);\n        });\n    });\n\n    const price = getUpgradePrice({\n      totalSupply: this.totalSupply(),\n      farmSize: this.details.farm.length,\n    });\n\n    this.details = {\n      ...this.details,\n      balance: this.details.balance - price,\n      farm: [\n        ...this.details.farm,\n        { createdAt: 0, fruit: Fruit.Sunflower },\n        { createdAt: 0, fruit: Fruit.Sunflower },\n        { createdAt: 0, fruit: Fruit.Sunflower },\n      ],\n    };\n  }\n\n  private async getAccount(): Promise<Account> {\n    if (!this.web3 || this.isTrial) {\n      return {\n        farm: [\n          {\n            createdAt: 0,\n            fruit: Fruit.None,\n          },\n          {\n            createdAt: 0,\n            fruit: Fruit.Sunflower,\n          },\n          {\n            createdAt: 0,\n            fruit: Fruit.Sunflower,\n          },\n          {\n            createdAt: 0,\n            fruit: Fruit.Sunflower,\n          },\n          {\n            createdAt: 0,\n            fruit: Fruit.None,\n          },\n        ],\n        balance: 0,\n        id: this.account,\n      };\n    }\n\n    const rawBalance = await this.alchemyToken.methods\n      .balanceOf(this.account)\n      .call({ from: this.account });\n    const farm = await this.alchemyFarm.methods\n      .getLand(this.account)\n      .call({ from: this.account });\n\n    const balance = this.web3.utils.fromWei(rawBalance.toString());\n    console.log({ balance });\n    return {\n      balance: Number(balance),\n      farm,\n      id: this.account,\n    };\n  }\n\n  public async craft({\n    recipe,\n    amount,\n  }: {\n    recipe: Recipe;\n    amount: number;\n  }) {\n    const blockChain = this;\n\n    if (this.isTrial) {\n      throw new Error(\"TRIAL_MODE\");\n    }\n\n    this.oldInventory = this.inventory;\n    console.log({ recipe, amount });\n\n    // ERC20 tokens are fractionalized so we need to multiply by 10^18 to get 1 whole one\n    const mintAmount =\n      recipe.type === \"NFT\"\n        ? amount\n        : this.web3.utils.toWei(amount.toString(), \"ether\");\n\n    await new Promise(async (resolve, reject) => {\n      this.farm.methods\n        .craft(recipe.address, mintAmount)\n        .send({ from: this.account })\n        .on(\"error\", function (error) {\n          console.log({ error });\n          // User rejected\n          if (error.code === 4001) {\n            return resolve(null);\n          }\n\n          reject(error);\n        })\n        .on(\"transactionHash\", function (transactionHash) {\n          console.log({ transactionHash });\n        })\n        .on(\"receipt\", function (receipt) {\n          console.log({ receipt });\n          blockChain.events = [];\n          resolve(receipt);\n        });\n    });\n\n    this.inventory[recipe.name] += amount;\n\n    recipe.ingredients.forEach((ingredient) => {\n      if (ingredient.name === \"$SFF\") {\n        this.details = {\n          ...this.details,\n          balance: this.details.balance - ingredient.amount * amount,\n        };\n      } else {\n        this.inventory[ingredient.name] -= ingredient.amount * amount;\n      }\n    });\n  }\n\n  public async communityCraft({\n    recipe,\n    amount,\n    eth = 0,\n  }: {\n    recipe: Recipe;\n    amount: number;\n    eth?: number;\n  }) {\n    const blockChain = this;\n\n    if (this.isTrial) {\n      throw new Error(\"TRIAL_MODE\");\n    }\n\n    this.oldInventory = this.inventory;\n    console.log({ recipe, amount });\n\n    const value = this.web3.utils.toWei(eth.toString(), \"ether\");\n    const gasPrice = await this.estimate(2);\n\n    await new Promise(async (resolve, reject) => {\n      this.communityCrafting.methods\n        .craft(recipe.address)\n        .send({ from: this.account, value, gasPrice })\n        .on(\"error\", function (error) {\n          console.log({ error });\n          // User rejected\n          if (error.code === 4001) {\n            return resolve(null);\n          }\n\n          reject(error);\n        })\n        .on(\"transactionHash\", function (transactionHash) {\n          console.log({ transactionHash });\n        })\n        .on(\"receipt\", function (receipt) {\n          console.log({ receipt });\n          blockChain.events = [];\n          resolve(receipt);\n        });\n    });\n\n    this.inventory[recipe.name] += amount;\n\n    recipe.ingredients.forEach((ingredient) => {\n      if (ingredient.name === \"$SFF\") {\n        this.details = {\n          ...this.details,\n          balance: this.details.balance - ingredient.amount * amount,\n        };\n      } else {\n        this.inventory[ingredient.name] -= ingredient.amount * amount;\n      }\n    });\n  }\n\n  private oldInventory: Inventory | null = null;\n  /**\n   * ALWAYS ENSURE THAT A RESOURCE CONTRACT DOES NOT HAVE A PUBLIC MINT!\n   * A resource can only be gained through a \"stake\"\n   */\n  public async stake({\n    resource,\n    amount,\n  }: {\n    resource: string;\n    amount: number;\n  }) {\n    const blockChain = this;\n\n    if (this.isTrial) {\n      throw new Error(\"TRIAL_MODE\");\n    }\n\n    // Save old inventory for comparison\n    this.oldInventory = this.inventory;\n\n    console.log({ resource, amount });\n    const gwei = this.web3.utils.toWei(amount.toString(), \"ether\");\n\n    await new Promise(async (resolve, reject) => {\n      this.farm.methods\n        .stake(resource, gwei)\n        .send({ from: this.account })\n        .on(\"error\", function (error) {\n          console.log({ error });\n          // User rejected\n          if (error.code === 4001) {\n            return resolve(null);\n          }\n\n          reject(error);\n        })\n        .on(\"transactionHash\", function (transactionHash) {\n          console.log({ transactionHash });\n        })\n        .on(\"receipt\", function (receipt) {\n          console.log({ receipt });\n          blockChain.events = [];\n          resolve(receipt);\n        });\n    });\n\n    // TODO fix - Polygon data is stale so use this - We are waiting an extra 20 seconds\n    await new Promise((res) => setTimeout(res, 20 * 1000));\n\n    await this.loadFarm();\n  }\n\n  public async getMarketConversion(): Promise<number> {\n    return await this.farm.methods\n      .getMarketPrice(1)\n      .call({ from: this.account });\n  }\n\n  public getWeb3() {\n    return this.web3;\n  }\n\n  public addEvent(event: Transaction) {\n    this.events = [...this.events, event];\n  }\n\n  public isUnsaved() {\n    return this.events.length > 0;\n  }\n\n  public get isTrial() {\n    return this.isTrialAccount;\n  }\n\n  public startTrialMode() {\n    this.isTrialAccount = true;\n  }\n\n  public endTrialMode() {\n    this.isTrialAccount = false;\n  }\n\n  public lastSaved() {\n    if (this.events.length === 0) {\n      return null;\n    }\n\n    return this.events[0].createdAt;\n  }\n\n  private cachedTotalSupply: number = 0;\n\n  public async cacheTotalSupply() {\n    if (!this.web3 || !this.alchemyToken) {\n      this.cachedTotalSupply = 0;\n    }\n\n    const totalSupply = await this.alchemyToken.methods\n      .totalSupply()\n      .call({ from: this.account });\n\n    const supply = this.web3.utils.fromWei(totalSupply);\n\n    this.cachedTotalSupply = Number(supply);\n  }\n\n  public totalSupply() {\n    return this.cachedTotalSupply;\n  }\n\n  public async getCharityBalances() {\n    const coolEarth = this.web3.eth.getBalance(Charity.CoolEarth);\n    const waterProject = this.web3.eth.getBalance(Charity.TheWaterProject);\n    const heifer = this.web3.eth.getBalance(Charity.Heifer);\n    const [coolEarthBalance, waterBalance, heiferBalance] =\n      await Promise.all([coolEarth, waterProject, heifer]);\n\n    return {\n      coolEarthBalance: this.web3.utils.fromWei(coolEarthBalance, \"ether\"),\n      waterBalance: this.web3.utils.fromWei(waterBalance, \"ether\"),\n      heiferBalance: this.web3.utils.fromWei(heiferBalance, \"ether\"),\n    };\n  }\n\n  // Used when a player did not save in time\n  public offsetTime() {\n    const latestTime = this.events[this.events.length - 1];\n    const now = Math.floor(Date.now() / 1000);\n    const difference = now - latestTime.createdAt;\n\n    // For each event, add the time\n    this.events = this.events.map((event) => ({\n      ...event,\n      createdAt: event.createdAt + difference,\n    }));\n  }\n\n  public resetFarm() {\n    this.events = [];\n  }\n\n  public async getReward() {\n    try {\n      const reward = await this.farm.methods\n        .myReward()\n        .call({ from: this.account });\n\n      if (!reward) {\n        return 0;\n      }\n\n      const converted = this.web3.utils.fromWei(reward.toString());\n\n      return Number(converted);\n    } catch (e) {\n      // No reward ready\n      return null;\n    }\n  }\n\n  public async receiveReward() {\n    const reward = await this.getReward();\n\n    await new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate(2);\n\n      this.farm.methods\n        .receiveReward()\n        .send({ from: this.account, gasPrice })\n        .on(\"error\", function (error) {\n          console.log({ error });\n          // User rejected\n          if (error.code === 4001) {\n            return resolve(null);\n          }\n\n          reject(error);\n        })\n        .on(\"transactionHash\", function (transactionHash) {\n          console.log({ transactionHash });\n        })\n        .on(\"receipt\", function (receipt) {\n          console.log({ receipt });\n          resolve(receipt);\n        });\n    });\n\n    this.details = {\n      ...this.details,\n      balance: this.details.balance + reward,\n    };\n  }\n\n  public async collectEggs() {\n    await new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate(2);\n\n      this.chickens.methods\n        .collectEggs()\n        .send({ from: this.account, gasPrice })\n        .on(\"error\", function (error) {\n          console.log({ error });\n          // User rejected\n          if (error.code === 4001) {\n            return resolve(null);\n          }\n\n          reject(error);\n        })\n        .on(\"transactionHash\", function (transactionHash) {\n          console.log({ transactionHash });\n        })\n        .on(\"receipt\", function (receipt) {\n          console.log({ receipt });\n          resolve(receipt);\n        });\n    });\n\n    const chickens = this.inventory.Chicken;\n\n    if (this.inventory[\"Chicken coop\"] > 0) {\n      this.inventory.Egg += chickens * 3;\n    } else {\n      this.inventory.Egg += chickens;\n    }\n\n    this.eggCollectionTime = Date.now() / 1000;\n  }\n\n  // Sunflower Tokens -> MATIC\n  public async quickswapRate() {\n    const base = 10000000000;\n    const rate = await this.quickswap.methods\n      .getAmountsIn(base, [\n        \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n        \"0xdf9B4b57865B403e08c85568442f95c26b7896b0\",\n      ])\n      .call({ from: this.account });\n\n    return Number(rate[0]) / Number(rate[1]);\n  }\n\n  public async approve(address: string, amount: number) {\n    const alreadyApproved = await this.token.methods\n      .allowance(this.account, address)\n      .call({ from: this.account });\n\n    const wei = this.web3.utils.toWei(amount.toString(), \"ether\");\n\n    if (Number(alreadyApproved) >= Number(wei)) {\n      return true;\n    }\n\n    return new Promise(async (resolve, reject) => {\n      const gasPrice = await this.estimate(2);\n\n      try {\n        this.token.methods\n          .approve(address, wei)\n          .send({ from: this.account, gasPrice })\n          .on(\"error\", function (error) {\n            console.log({ error });\n            reject(error);\n          })\n          .on(\"transactionHash\", function (transactionHash) {\n            console.log({ transactionHash });\n          })\n          .on(\"receipt\", function (receipt) {\n            console.log({ receipt });\n            resolve(receipt);\n          });\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  private async loadInventory(): Promise<Inventory> {\n    // Call balanceOf on each item\n    const itemBalancesPromise = Object.values(this.contracts).map(\n      (contract) =>\n        contract.methods\n          .balanceOf(this.account)\n          .call({ from: this.account })\n    );\n\n    const itemBalances = await Promise.all(itemBalancesPromise);\n\n    console.log({ itemBalances });\n    const values: Record<ItemName, number> = Object.keys(\n      this.contracts\n    ).reduce((itemValues, itemName, index) => {\n      const isNFT =\n        items.find((item) => item.name === itemName).type === \"NFT\";\n      const balance = itemBalances[index];\n      return {\n        ...itemValues,\n        [itemName]: isNFT\n          ? Number(balance)\n          : Math.ceil(Number(this.web3.utils.fromWei(balance))),\n      };\n    }, {} as Record<ItemName, number>);\n\n    console.log({ inventory: values });\n\n    return values;\n  }\n\n  private async loadTotalItemSupplies(): Promise<Inventory> {\n    // Call totalSupply on each item\n    const itemSupplyPromise = Object.values(this.contracts).map(\n      (contract) =>\n        contract.methods.totalSupply().call({ from: this.account })\n    );\n\n    const itemTotalSupplies = await Promise.all(itemSupplyPromise);\n\n    const values: Record<ItemName, number> = Object.keys(\n      this.contracts\n    ).reduce(\n      (itemValues, itemName, index) => ({\n        ...itemValues,\n        [itemName]: itemTotalSupplies[index],\n      }),\n      {} as Record<ItemName, number>\n    );\n\n    console.log({ values });\n\n    return values;\n  }\n\n  public getInventory() {\n    return this.inventory;\n  }\n\n  public getTotalItemSupplies() {\n    return this.totalItemSupplies;\n  }\n\n  public getInventoryChange(): Inventory {\n    if (!this.oldInventory) {\n      return DEFAULT_INVENTORY;\n    }\n\n    // Calculate the difference since we last synced with the blockchain\n    const changes: Record<ItemName, number> = items.reduce(\n      (change, item) => ({\n        ...change,\n        [item.name]:\n          this.inventory[item.name] - this.oldInventory[item.name],\n      }),\n      {} as Record<ItemName, number>\n    );\n\n    return {\n      ...changes,\n    };\n  }\n\n  public async loadTreeStrength() {\n    const strength = await this.contracts.Wood.methods\n      .getAvailable(this.account)\n      .call({ from: this.account });\n\n    return Number(this.web3.utils.fromWei(strength));\n  }\n\n  public async loadStoneStrength() {\n    const strength = await this.contracts.Stone.methods\n      .getAvailable(this.account)\n      .call({ from: this.account });\n\n    return Number(this.web3.utils.fromWei(strength));\n  }\n\n  public async loadIronStrength() {\n    const strength = await this.contracts.Iron.methods\n      .getAvailable(this.account)\n      .call({ from: this.account });\n\n    return Number(this.web3.utils.fromWei(strength));\n  }\n\n  public async loadGoldStrength() {\n    const strength = await this.contracts.Gold.methods\n      .getAvailable(this.account)\n      .call({ from: this.account });\n\n    return Number(this.web3.utils.fromWei(strength));\n  }\n\n  public async loadEggCollectionTime() {\n    const time = await this.chickens.methods\n      .hatchTime(this.account)\n      .call({ from: this.account });\n\n    return Number(time);\n  }\n\n  public async getTreeStrength() {\n    console.log({ ws: this.woodStrength });\n    return this.woodStrength;\n  }\n\n  public async getStoneStrength() {\n    return this.stoneStrength;\n  }\n\n  public async getIronStrength() {\n    return this.ironStrength;\n  }\n\n  public async getGoldStrength() {\n    return this.goldStrength;\n  }\n\n  public async getEggCollectionTime() {\n    return this.eggCollectionTime;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
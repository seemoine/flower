{"ast":null,"code":"export function getExchangeRate(supply) {\n  if (supply < 100000) {\n    return 1;\n  }\n\n  if (supply < 500000) {\n    return 0.5;\n  }\n\n  if (supply < 1000000) {\n    return 0.1;\n  }\n\n  if (supply < 5000000) {\n    return 0.05;\n  }\n\n  if (supply < 10000000) {\n    return 0.01;\n  }\n\n  if (supply < 50000000) {\n    return 0.005;\n  }\n\n  if (supply < 100000000) {\n    return 0.001;\n  }\n\n  if (supply < 500000000) {\n    return 0.0005;\n  }\n\n  if (supply < 1000000000) {\n    return 0.0001;\n  } // Linear growth\n\n\n  return 1 / supply * 100000;\n}\nexport function getMarketRate(supply) {\n  if (supply < 100000) {\n    // 1 Farm Dollar gets you 1 FMC token\n    return 1;\n  } // Less than 500, 000 tokens\n\n\n  if (supply < 500000) {\n    return 5;\n  } // Less than 1, 000, 000 tokens\n\n\n  if (supply < 1000000) {\n    return 10;\n  } // Less than 5, 000, 000 tokens\n\n\n  if (supply < 5000000) {\n    return 50;\n  } // Less than 10, 000, 000 tokens\n\n\n  if (supply < 10000000) {\n    return 100;\n  } // Less than 50, 000, 000 tokens\n\n\n  if (supply < 50000000) {\n    return 500;\n  } // Less than 100, 000, 000 tokens\n\n\n  if (supply < 100000000) {\n    return 1000;\n  } // Less than 500, 000, 000 tokens\n\n\n  if (supply < 500000000) {\n    return 5000;\n  } // Less than 1, 000, 000, 000 tokens\n\n\n  if (supply < 1000000000) {\n    return 10000;\n  } // 1 Farm Dollar gets you a 0.00001 of a token - Linear growth from here\n\n\n  return supply / 10000;\n}\nconst thresholds = [{\n  amount: 100000,\n  halveningRate: 5\n}, {\n  amount: 500000,\n  halveningRate: 2\n}, {\n  amount: 1000000,\n  halveningRate: 5\n}, {\n  amount: 5000000,\n  halveningRate: 2\n}, {\n  amount: 10000000,\n  halveningRate: 5\n}, {\n  amount: 50000000,\n  halveningRate: 2\n}, {\n  amount: 100000000,\n  halveningRate: 5\n}, {\n  amount: 500000000,\n  halveningRate: 2\n}, // Soft supply limit at 1 billion tokens\n{\n  amount: 1000000000,\n  halveningRate: 100000000000000\n}];\nexport function getHalveningRate(supply) {\n  for (let i = 0; i < thresholds.length; i++) {\n    if (supply < thresholds[i].amount) {\n      return thresholds[i].halveningRate;\n    }\n  }\n\n  return 0;\n}\nexport function getNextHalvingThreshold(supply) {\n  const currentThresholdIdx = thresholds.findIndex(threshold => supply < threshold.amount);\n\n  if (currentThresholdIdx >= 0) {\n    return thresholds[currentThresholdIdx];\n  }\n\n  return null;\n}\nexport function getNextMarketRate(supply) {\n  const nextThreshold = getNextHalvingThreshold(supply);\n\n  if (nextThreshold) {\n    return getMarketRate(nextThreshold.amount);\n  }\n}\nexport function isNearHalvening(supply) {\n  return thresholds.some(threshold => {\n    const minWarning = threshold.amount * 0.95;\n    const maxWarning = threshold.amount * 1.05;\n    return supply > minWarning && supply < maxWarning;\n  });\n}","map":{"version":3,"sources":["/home/jacob/Documents/Programming/myApp/src/dapp/utils/supply.ts"],"names":["getExchangeRate","supply","getMarketRate","thresholds","amount","halveningRate","getHalveningRate","i","length","getNextHalvingThreshold","currentThresholdIdx","findIndex","threshold","getNextMarketRate","nextThreshold","isNearHalvening","some","minWarning","maxWarning"],"mappings":"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","sourcesContent":["export function getExchangeRate(supply: number) {\n  if (supply < 100000) {\n    return 1;\n  }\n\n  if (supply < 500000) {\n    return 0.5;\n  }\n\n  if (supply < 1000000) {\n    return 0.1;\n  }\n\n  if (supply < 5000000) {\n    return 0.05;\n  }\n\n  if (supply < 10000000) {\n    return 0.01;\n  }\n\n  if (supply < 50000000) {\n    return 0.005;\n  }\n\n  if (supply < 100000000) {\n    return 0.001;\n  }\n\n  if (supply < 500000000) {\n    return 0.0005;\n  }\n\n  if (supply < 1000000000) {\n    return 0.0001;\n  }\n\n  // Linear growth\n  return (1 / supply) * 100000;\n}\n\nexport function getMarketRate(supply: number) {\n  if (supply < 100000) {\n    // 1 Farm Dollar gets you 1 FMC token\n    return 1;\n  }\n\n  // Less than 500, 000 tokens\n  if (supply < 500000) {\n    return 5;\n  }\n\n  // Less than 1, 000, 000 tokens\n  if (supply < 1000000) {\n    return 10;\n  }\n\n  // Less than 5, 000, 000 tokens\n  if (supply < 5000000) {\n    return 50;\n  }\n\n  // Less than 10, 000, 000 tokens\n  if (supply < 10000000) {\n    return 100;\n  }\n\n  // Less than 50, 000, 000 tokens\n  if (supply < 50000000) {\n    return 500;\n  }\n\n  // Less than 100, 000, 000 tokens\n  if (supply < 100000000) {\n    return 1000;\n  }\n\n  // Less than 500, 000, 000 tokens\n  if (supply < 500000000) {\n    return 5000;\n  }\n\n  // Less than 1, 000, 000, 000 tokens\n  if (supply < 1000000000) {\n    return 10000;\n  }\n\n  // 1 Farm Dollar gets you a 0.00001 of a token - Linear growth from here\n  return supply / 10000;\n}\n\ninterface Threshold {\n  amount: number;\n  halveningRate: number;\n}\nconst thresholds: Threshold[] = [\n  { amount: 100000, halveningRate: 5 },\n  { amount: 500000, halveningRate: 2 },\n  { amount: 1000000, halveningRate: 5 },\n  { amount: 5000000, halveningRate: 2 },\n  { amount: 10000000, halveningRate: 5 },\n  { amount: 50000000, halveningRate: 2 },\n  { amount: 100000000, halveningRate: 5 },\n  { amount: 500000000, halveningRate: 2 },\n  // Soft supply limit at 1 billion tokens\n  { amount: 1000000000, halveningRate: 100000000000000 },\n];\n\nexport function getHalveningRate(supply: number) {\n  for (let i = 0; i < thresholds.length; i++) {\n    if (supply < thresholds[i].amount) {\n      return thresholds[i].halveningRate;\n    }\n  }\n\n  return 0;\n}\n\nexport function getNextHalvingThreshold(supply: number): Threshold {\n  const currentThresholdIdx = thresholds.findIndex(\n    (threshold) => supply < threshold.amount\n  );\n\n  if (currentThresholdIdx >= 0) {\n    return thresholds[currentThresholdIdx];\n  }\n\n  return null;\n}\n\nexport function getNextMarketRate(supply: number) {\n  const nextThreshold = getNextHalvingThreshold(supply);\n\n  if (nextThreshold) {\n    return getMarketRate(nextThreshold.amount);\n  }\n}\n\nexport function isNearHalvening(supply: number) {\n  return thresholds.some((threshold) => {\n    const minWarning = threshold.amount * 0.95;\n    const maxWarning = threshold.amount * 1.05;\n\n    return supply > minWarning && supply < maxWarning;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/Programming/myApp/src/dapp/components/ui/RewardModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useService } from \"@xstate/react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport openTreasure from \"../../images/decorations/open_treasure.png\";\nimport { service } from \"../../machine\";\nimport cancel from \"../../images/ui/cancel.png\";\nimport coin from \"../../images/ui/spinning_coin.gif\";\nimport { Panel } from \"./Panel\";\nimport { Message } from \"./Message\";\nimport { Button } from \"./Button\";\nimport \"./UpgradeModal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const RewardModal = _ref => {\n  _s();\n\n  let {\n    isOpen,\n    onClose,\n    reward,\n    onReceive\n  } = _ref;\n  const [machineState, send] = useService(service);\n  const isUnsaved = machineState.context.blockChain.isUnsaved();\n\n  if (!reward) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    centered: true,\n    show: isOpen,\n    onHide: onClose,\n    children: /*#__PURE__*/_jsxDEV(Panel, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"reward-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Collect your reward\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), isUnsaved ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upgrade-required\",\n            children: /*#__PURE__*/_jsxDEV(Message, {\n              children: [\"Save your farm first\", /*#__PURE__*/_jsxDEV(\"img\", {\n                src: cancel,\n                className: \"insufficient-funds-cross\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            id: \"donate-description\",\n            children: [\"You must first save your farm to the blockchain before attempting to receive your reward.\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"treasure-holder\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: openTreasure,\n              id: \"open-treasure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: coin,\n              id: \"reward-coin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"reward-holder\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: `${reward.toFixed(2)} $SFF`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"reward-button\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onReceive,\n              children: \"Collect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RewardModal, \"csENE+EQ+z1dV/iylp2/e5/4/Jw=\", false, function () {\n  return [useService];\n});\n\n_c = RewardModal;\nexport const UpgradeOverlay = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  id: \"tester\",\n  ...props,\n  children: /*#__PURE__*/_jsxDEV(Message, {\n    children: \"Upgrade required\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 89,\n  columnNumber: 3\n}, this);\n_c2 = UpgradeOverlay;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RewardModal\");\n$RefreshReg$(_c2, \"UpgradeOverlay\");","map":{"version":3,"sources":["/home/jacob/Documents/Programming/myApp/src/dapp/components/ui/RewardModal.tsx"],"names":["React","useService","Modal","openTreasure","service","cancel","coin","Panel","Message","Button","RewardModal","isOpen","onClose","reward","onReceive","machineState","send","isUnsaved","context","blockChain","toFixed","UpgradeOverlay","props"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAOC,KAAP,MAAkB,uBAAlB;AAEA,OAAOC,YAAP,MAAyB,4CAAzB;AAEA,SACEC,OADF,QAKO,eALP;AAOA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,IAAP,MAAiB,mCAAjB;AAEA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,OAAO,oBAAP;;;AASA,OAAO,MAAMC,WAA4B,GAAG,QAKtC;AAAA;;AAAA,MALuC;AAC3CC,IAAAA,MAD2C;AAE3CC,IAAAA,OAF2C;AAG3CC,IAAAA,MAH2C;AAI3CC,IAAAA;AAJ2C,GAKvC;AACJ,QAAM,CAACC,YAAD,EAAeC,IAAf,IAAuBf,UAAU,CAIrCG,OAJqC,CAAvC;AAMA,QAAMa,SAAS,GAAGF,YAAY,CAACG,OAAb,CAAqBC,UAArB,CAAgCF,SAAhC,EAAlB;;AAEA,MAAI,CAACJ,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAED,sBACE,QAAC,KAAD;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,IAAI,EAAEF,MAAtB;AAA8B,IAAA,MAAM,EAAEC,OAAtC;AAAA,2BACE,QAAC,KAAD;AAAA,6BACE;AAAK,QAAA,EAAE,EAAC,kBAAR;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAGGK,SAAS,gBACR;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,kBAAf;AAAA,mCACE,QAAC,OAAD;AAAA,8DAEE;AAAK,gBAAA,GAAG,EAAEZ,MAAV;AAAkB,gBAAA,SAAS,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAM,YAAA,EAAE,EAAC,oBAAT;AAAA,oHAEqC,GAFrC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA,wBADQ,gBAcR;AAAA,kCACE;AAAK,YAAA,EAAE,EAAC,iBAAR;AAAA,oCACE;AAAK,cAAA,GAAG,EAAEF,YAAV;AAAwB,cAAA,EAAE,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAK,cAAA,GAAG,EAAEG,IAAV;AAAgB,cAAA,EAAE,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAKE;AAAK,YAAA,EAAE,EAAC,eAAR;AAAA,mCACE;AAAA,wBAAQ,GAAEO,MAAM,CAACO,OAAP,CAAe,CAAf,CAAkB;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBALF,eAQE;AAAK,YAAA,EAAE,EAAC,eAAR;AAAA,mCACE,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAEN,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqCD,CAvDM;;GAAMJ,W;UAMkBT,U;;;KANlBS,W;AAyDb,OAAO,MAAMW,cAAc,GAAIC,KAAD,iBAC5B;AAAK,EAAA,EAAE,EAAC,QAAR;AAAA,KAAqBA,KAArB;AAAA,yBACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADK;MAAMD,c","sourcesContent":["import React from \"react\";\nimport { useService } from \"@xstate/react\";\n\nimport Modal from \"react-bootstrap/Modal\";\n\nimport openTreasure from \"../../images/decorations/open_treasure.png\";\n\nimport {\n  service,\n  Context,\n  BlockchainEvent,\n  BlockchainState,\n} from \"../../machine\";\n\nimport cancel from \"../../images/ui/cancel.png\";\nimport coin from \"../../images/ui/spinning_coin.gif\";\n\nimport { Panel } from \"./Panel\";\nimport { Message } from \"./Message\";\nimport { Button } from \"./Button\";\n\nimport \"./UpgradeModal.css\";\n\ninterface Props {\n  isOpen: boolean;\n  onClose: () => void;\n  onReceive: () => void;\n  reward: number;\n}\n\nexport const RewardModal: React.FC<Props> = ({\n  isOpen,\n  onClose,\n  reward,\n  onReceive,\n}) => {\n  const [machineState, send] = useService<\n    Context,\n    BlockchainEvent,\n    BlockchainState\n  >(service);\n\n  const isUnsaved = machineState.context.blockChain.isUnsaved();\n\n  if (!reward) {\n    return null;\n  }\n\n  return (\n    <Modal centered show={isOpen} onHide={onClose}>\n      <Panel>\n        <div id=\"reward-container\">\n          <span>Collect your reward</span>\n\n          {isUnsaved ? (\n            <>\n              <div className=\"upgrade-required\">\n                <Message>\n                  Save your farm first\n                  <img src={cancel} className=\"insufficient-funds-cross\" />\n                </Message>\n              </div>\n              <span id=\"donate-description\">\n                You must first save your farm to the blockchain before\n                attempting to receive your reward.{\" \"}\n              </span>\n            </>\n          ) : (\n            <div>\n              <div id=\"treasure-holder\">\n                <img src={openTreasure} id=\"open-treasure\" />\n                <img src={coin} id=\"reward-coin\" />\n              </div>\n              <div id=\"reward-holder\">\n                <span>{`${reward.toFixed(2)} $SFF`}</span>\n              </div>\n              <div id=\"reward-button\">\n                <Button onClick={onReceive}>Collect</Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </Panel>\n    </Modal>\n  );\n};\n\nexport const UpgradeOverlay = (props) => (\n  <div id=\"tester\" {...props}>\n    <Message>Upgrade required</Message>\n  </div>\n);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createMachine, interpret, assign } from \"xstate\";\nimport { BlockChain } from \"./Blockchain\";\nimport { hasOnboarded } from \"./utils/localStorage\";\nimport { isNearHalvening } from \"./utils/supply\";\n\nconst hasFarm = _ref => {\n  let {\n    blockChain\n  } = _ref;\n  return blockChain.isTrial || blockChain.hasFarm;\n};\n\nconst MOBILE_DEVICES = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\n\nconst isMobile = () => {\n  return MOBILE_DEVICES.test(navigator.userAgent);\n};\n\nexport const blockChainMachine = createMachine({\n  id: \"farmMachine\",\n  initial: \"initial\",\n  context: {\n    blockChain: new BlockChain(),\n    errorCode: null\n  },\n  states: {\n    initial: {\n      on: {\n        GET_STARTED: [{\n          target: \"unsupported\",\n          cond: isMobile\n        }, {\n          target: \"loading\"\n        }]\n      }\n    },\n    loading: {\n      invoke: {\n        src: _ref2 => {\n          let {\n            blockChain\n          } = _ref2;\n          return blockChain.initialise();\n        },\n        onDone: [{\n          target: \"farming\",\n          cond: hasFarm\n        }, {\n          target: \"registering\"\n        }],\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message\n          })\n        }\n      }\n    },\n    registering: {\n      on: {\n        DONATE: {\n          target: \"creating\"\n        },\n        NETWORK_CHANGED: {\n          target: \"loading\"\n        }\n      }\n    },\n    creating: {\n      invoke: {\n        src: (_ref3, event) => {\n          let {\n            blockChain\n          } = _ref3;\n          return blockChain.createFarm(event.donation);\n        },\n        onDone: {\n          target: \"onboarding\"\n        },\n        onError: {\n          target: \"registering\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message\n          })\n        }\n      }\n    },\n    onboarding: {\n      on: {\n        FINISH: {\n          target: \"farming\"\n        },\n        CLOSE: {\n          target: \"farming\"\n        }\n      },\n      initial: \"harvesting\",\n      states: {\n        harvesting: {\n          on: {\n            HARVEST: {\n              target: \"token\"\n            }\n          }\n        },\n        token: {\n          on: {\n            NEXT: {\n              target: \"planting\"\n            }\n          }\n        },\n        planting: {\n          on: {\n            PLANT: {\n              target: \"saving\"\n            }\n          }\n        },\n        saving: {\n          on: {\n            NEXT: {\n              target: \"market\"\n            }\n          }\n        },\n        market: {}\n      }\n    },\n    farming: {\n      on: {\n        SAVE: {\n          target: \"saving\"\n        },\n        OPEN_REWARD: {\n          target: \"rewarding\"\n        },\n        CRAFT: {\n          target: \"crafting\"\n        },\n        CHOP: {\n          target: \"chopping\"\n        },\n        MINE: {\n          target: \"mining\"\n        },\n        COLLECT_EGGS: {\n          target: \"collecting\"\n        },\n        TIMER_COMPLETE: {\n          target: \"timerComplete\"\n        },\n        ACCOUNT_CHANGED: {\n          target: \"loading\",\n          actions: context => context.blockChain.resetFarm()\n        },\n        NETWORK_CHANGED: {\n          target: \"loading\",\n          actions: context => context.blockChain.resetFarm()\n        }\n      }\n    },\n    warning: {\n      on: {\n        SAVE: [{\n          cond: (_, event) => {\n            return event.action === \"UPGRADE\";\n          },\n          target: \"upgrading\"\n        }, {\n          target: \"confirming\"\n        }]\n      }\n    },\n    saving: {\n      invoke: {\n        id: \"save\",\n        src: async (_ref4, event) => {\n          let {\n            blockChain\n          } = _ref4;\n          const estimate = await blockChain.estimate();\n          return {\n            estimate,\n            action: event.action\n          };\n        },\n        onDone: [{\n          cond: (context, event) => {\n            if (isNearHalvening(context.blockChain.totalSupply())) {\n              return true;\n            } // First time saving, show the warning\n\n\n            if (!hasOnboarded()) {\n              return true;\n            } // Woh! Gas prices are large, give the player a hint\n\n\n            return event.data.estimate > 40000000000;\n          },\n          target: \"warning\",\n          actions: assign({\n            gasPrice: (context, event) => event.data.estimate\n          })\n        }, {\n          cond: (_, event) => {\n            return event.data.action === \"UPGRADE\";\n          },\n          target: \"upgrading\"\n        }, {\n          target: \"confirming\"\n        }],\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message\n          })\n        }\n      }\n    },\n    confirming: {\n      invoke: {\n        id: \"save\",\n        src: async (_ref5, event) => {\n          let {\n            blockChain\n          } = _ref5;\n          return blockChain.save();\n        },\n        onDone: {\n          target: \"farming\"\n        },\n        onError: {\n          target: \"saveFailure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message\n          })\n        }\n      }\n    },\n    upgrading: {\n      invoke: {\n        id: \"upgrading\",\n        src: async _ref6 => {\n          let {\n            blockChain\n          } = _ref6;\n          await blockChain.levelUp();\n        },\n        onDone: {\n          target: \"farming\"\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message\n          })\n        }\n      }\n    },\n    rewarding: {\n      invoke: {\n        id: \"rewarding\",\n        src: async (_ref7, event) => {\n          let {\n            blockChain\n          } = _ref7;\n          return blockChain.receiveReward();\n        },\n        onDone: {\n          target: \"farming\" // actions - assign() data?\n\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message\n          })\n        }\n      }\n    },\n    crafting: {\n      invoke: {\n        id: \"crafting\",\n        src: async (_ref8, event) => {\n          let {\n            blockChain\n          } = _ref8;\n\n          if (event.recipe.communityMember) {\n            return blockChain.communityCraft(event);\n          }\n\n          return blockChain.craft(event);\n        },\n        onDone: {\n          target: \"farming\" // actions - assign() data?\n\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message\n          })\n        }\n      }\n    },\n    chopping: {\n      invoke: {\n        id: \"chopping\",\n        src: async (_ref9, event) => {\n          let {\n            blockChain\n          } = _ref9;\n          return blockChain.stake(event);\n        },\n        onDone: {\n          target: \"farming\" // actions - assign() data?\n\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message\n          })\n        }\n      }\n    },\n    mining: {\n      invoke: {\n        id: \"mining\",\n        src: async (_ref10, event) => {\n          let {\n            blockChain\n          } = _ref10;\n          return blockChain.stake(event);\n        },\n        onDone: {\n          target: \"farming\"\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message\n          })\n        }\n      }\n    },\n    collecting: {\n      invoke: {\n        id: \"collecting\",\n        src: async _ref11 => {\n          let {\n            blockChain\n          } = _ref11;\n          return blockChain.collectEggs();\n        },\n        onDone: {\n          target: \"farming\"\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message\n          })\n        }\n      }\n    },\n    failure: {\n      on: {\n        NETWORK_CHANGED: {\n          target: \"loading\",\n          actions: context => {\n            context.blockChain.endTrialMode();\n          }\n        },\n        TRIAL: {\n          target: \"onboarding\",\n          actions: context => {\n            context.blockChain.startTrialMode();\n          }\n        }\n      }\n    },\n    saveFailure: {\n      on: {\n        SAVE: {\n          target: \"saving\",\n          actions: context => {\n            context.blockChain.offsetTime();\n          }\n        },\n        CLOSE: {\n          target: \"farming\"\n        }\n      }\n    },\n    timerComplete: {\n      on: {\n        SAVE: {\n          target: \"saving\",\n          actions: context => {\n            context.blockChain.offsetTime();\n          }\n        }\n      }\n    },\n    unsupported: {}\n  }\n});\nexport const service = interpret(blockChainMachine);\nservice.start();","map":{"version":3,"sources":["/home/jacob/Documents/Programming/myApp/src/dapp/machine.ts"],"names":["createMachine","interpret","assign","BlockChain","hasOnboarded","isNearHalvening","hasFarm","blockChain","isTrial","MOBILE_DEVICES","isMobile","test","navigator","userAgent","blockChainMachine","id","initial","context","errorCode","states","on","GET_STARTED","target","cond","loading","invoke","src","initialise","onDone","onError","actions","event","data","message","registering","DONATE","NETWORK_CHANGED","creating","createFarm","donation","onboarding","FINISH","CLOSE","harvesting","HARVEST","token","NEXT","planting","PLANT","saving","market","farming","SAVE","OPEN_REWARD","CRAFT","CHOP","MINE","COLLECT_EGGS","TIMER_COMPLETE","ACCOUNT_CHANGED","resetFarm","warning","_","action","estimate","totalSupply","gasPrice","confirming","save","upgrading","levelUp","rewarding","receiveReward","crafting","recipe","communityMember","communityCraft","craft","chopping","stake","mining","collecting","collectEggs","failure","endTrialMode","TRIAL","startTrialMode","saveFailure","offsetTime","timerComplete","unsupported","service","start"],"mappings":"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","sourcesContent":["import {\n  createMachine,\n  Interpreter,\n  EventObject,\n  interpret,\n  assign,\n} from \"xstate\";\nimport { Charity } from \"./types/contract\";\nimport { BlockChain } from \"./Blockchain\";\nimport { Recipe } from \"./types/crafting\";\nimport { hasOnboarded } from \"./utils/localStorage\";\nimport { isNearHalvening } from \"./utils/supply\";\n\nexport interface Context {\n  blockChain: BlockChain;\n  errorCode?: \"NO_WEB3\" | \"WRONG_CHAIN\";\n  gasPrice?: number;\n}\n\nconst hasFarm = ({ blockChain }: Context) => {\n  return blockChain.isTrial || blockChain.hasFarm;\n};\n\nconst MOBILE_DEVICES =\n  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\n\nconst isMobile = () => {\n  return MOBILE_DEVICES.test(navigator.userAgent);\n};\n\nexport interface FarmCreatedEvent extends EventObject {\n  type: \"FARM_CREATED\";\n}\n\nexport interface NetworkChangedEvent extends EventObject {\n  type: \"NETWORK_CHANGED\";\n}\n\nexport interface GetStartedEvent extends EventObject {\n  type: \"GET_STARTED\";\n}\n\nexport interface SaveEvent extends EventObject {\n  type: \"SAVE\";\n  action: \"SYNC\" | \"UPGRADE\";\n}\n\nexport interface RetryEvent extends EventObject {\n  type: \"RETRY\";\n}\n\nexport interface TrialEvent extends EventObject {\n  type: \"TRIAL\";\n}\nexport interface TimerCompleteEvent extends EventObject {\n  type: \"TIMER_COMPLETE\";\n}\n\nexport interface DonateEvent extends EventObject {\n  type: \"DONATE\";\n  donation: {\n    charity: Charity;\n    value: string;\n  };\n}\n\nexport interface FinishEvent extends EventObject {\n  type: \"FINISH\";\n}\n\nexport interface CloseOnboardingEvent extends EventObject {\n  type: \"CLOSE\";\n}\n\nexport interface NextOnboardingEvent extends EventObject {\n  type: \"NEXT\";\n}\n\nexport interface HarvestedOnboardingEvent extends EventObject {\n  type: \"HARVEST\";\n}\n\nexport interface PlantedOnboardingEvent extends EventObject {\n  type: \"PLANT\";\n}\n\nexport interface CraftEvent extends EventObject {\n  type: \"CRAFT\";\n  recipe: Recipe;\n  amount: number;\n  eth?: number;\n}\n\nexport interface ChopEvent extends EventObject {\n  type: \"CHOP\";\n  resource: string;\n  amount: number;\n}\n\nexport interface MineEvent extends EventObject {\n  type: \"MINE\";\n  resource: string;\n  amount: number;\n}\n\nexport interface CollectEggs extends EventObject {\n  type: \"COLLECT_EGGS\";\n}\n\ntype OnboardingEvent =\n  | CloseOnboardingEvent\n  | NextOnboardingEvent\n  | HarvestedOnboardingEvent\n  | PlantedOnboardingEvent;\n\nexport type BlockchainEvent =\n  | FarmCreatedEvent\n  | NetworkChangedEvent\n  | GetStartedEvent\n  | SaveEvent\n  | DonateEvent\n  | TrialEvent\n  | TimerCompleteEvent\n  | FinishEvent\n  | CloseOnboardingEvent\n  | OnboardingEvent\n  | CraftEvent\n  | RetryEvent\n  | ChopEvent\n  | MineEvent\n  | CollectEggs\n  | {\n      type: \"ACCOUNT_CHANGED\";\n    }\n  | {\n      type: \"OPEN_REWARD\";\n    }\n  | {\n      type: \"CANCEL\";\n    };\n\nexport type OnboardingStates =\n  | \"harvesting\"\n  | \"token\"\n  | \"planting\"\n  | \"saving\"\n  | \"market\";\n\nexport type BlockchainState = {\n  value:\n    | \"loading\"\n    | \"initial\"\n    | \"registering\"\n    | \"creating\"\n    | \"onboarding\"\n    | \"farming\"\n    | \"failure\"\n    | \"upgrading\"\n    | \"rewarding\"\n    | \"saving\"\n    | \"warning\"\n    | \"confirming\"\n    | \"crafting\"\n    | \"chopping\"\n    | \"collecting\"\n    | \"mining\"\n    | \"timerComplete\"\n    | \"unsupported\"\n    | \"saveFailure\"\n    | OnboardingStates;\n  context: Context;\n};\n\nexport type BlockchainInterpreter = Interpreter<\n  Context,\n  any,\n  BlockchainEvent,\n  BlockchainState\n>;\nexport const blockChainMachine = createMachine<\n  Context,\n  BlockchainEvent,\n  BlockchainState\n>({\n  id: \"farmMachine\",\n  initial: \"initial\",\n  context: {\n    blockChain: new BlockChain(),\n    errorCode: null,\n  },\n  states: {\n    initial: {\n      on: {\n        GET_STARTED: [\n          {\n            target: \"unsupported\",\n            cond: isMobile,\n          },\n          {\n            target: \"loading\",\n          },\n        ],\n      },\n    },\n    loading: {\n      invoke: {\n        src: ({ blockChain }) => blockChain.initialise(),\n        onDone: [\n          {\n            target: \"farming\",\n            cond: hasFarm,\n          },\n          {\n            target: \"registering\",\n          },\n        ],\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message,\n          }),\n        },\n      },\n    },\n    registering: {\n      on: {\n        DONATE: {\n          target: \"creating\",\n        },\n        NETWORK_CHANGED: {\n          target: \"loading\",\n        },\n      },\n    },\n    creating: {\n      invoke: {\n        src: ({ blockChain }, event) =>\n          blockChain.createFarm((event as DonateEvent).donation),\n        onDone: {\n          target: \"onboarding\",\n        },\n        onError: {\n          target: \"registering\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message,\n          }),\n        },\n      },\n    },\n    onboarding: {\n      on: {\n        FINISH: {\n          target: \"farming\",\n        },\n        CLOSE: {\n          target: \"farming\",\n        },\n      },\n      initial: \"harvesting\",\n      states: {\n        harvesting: {\n          on: {\n            HARVEST: { target: \"token\" },\n          },\n        },\n        token: {\n          on: {\n            NEXT: { target: \"planting\" },\n          },\n        },\n        planting: {\n          on: {\n            PLANT: { target: \"saving\" },\n          },\n        },\n        saving: {\n          on: {\n            NEXT: { target: \"market\" },\n          },\n        },\n        market: {},\n      },\n    },\n    farming: {\n      on: {\n        SAVE: {\n          target: \"saving\",\n        },\n        OPEN_REWARD: {\n          target: \"rewarding\",\n        },\n        CRAFT: {\n          target: \"crafting\",\n        },\n        CHOP: {\n          target: \"chopping\",\n        },\n        MINE: {\n          target: \"mining\",\n        },\n        COLLECT_EGGS: {\n          target: \"collecting\",\n        },\n        TIMER_COMPLETE: {\n          target: \"timerComplete\",\n        },\n        ACCOUNT_CHANGED: {\n          target: \"loading\",\n          actions: (context) => context.blockChain.resetFarm(),\n        },\n        NETWORK_CHANGED: {\n          target: \"loading\",\n          actions: (context) => context.blockChain.resetFarm(),\n        },\n      },\n    },\n    warning: {\n      on: {\n        SAVE: [\n          {\n            cond: (_, event) => {\n              return event.action === \"UPGRADE\";\n            },\n            target: \"upgrading\",\n          },\n          {\n            target: \"confirming\",\n          },\n        ],\n      },\n    },\n    saving: {\n      invoke: {\n        id: \"save\",\n        src: async ({ blockChain }, event: SaveEvent) => {\n          const estimate = await blockChain.estimate();\n\n          return { estimate, action: event.action };\n        },\n        onDone: [\n          {\n            cond: (context, event) => {\n              if (isNearHalvening(context.blockChain.totalSupply())) {\n                return true;\n              }\n\n              // First time saving, show the warning\n              if (!hasOnboarded()) {\n                return true;\n              }\n\n              // Woh! Gas prices are large, give the player a hint\n              return event.data.estimate > 40000000000;\n            },\n            target: \"warning\",\n            actions: assign({\n              gasPrice: (context, event) => event.data.estimate,\n            }),\n          },\n          {\n            cond: (_, event) => {\n              return event.data.action === \"UPGRADE\";\n            },\n            target: \"upgrading\",\n          },\n          {\n            target: \"confirming\",\n          },\n        ],\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message,\n          }),\n        },\n      },\n    },\n    confirming: {\n      invoke: {\n        id: \"save\",\n        src: async ({ blockChain }, event) => {\n          return blockChain.save();\n        },\n        onDone: {\n          target: \"farming\",\n        },\n        onError: {\n          target: \"saveFailure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message,\n          }),\n        },\n      },\n    },\n    upgrading: {\n      invoke: {\n        id: \"upgrading\",\n        src: async ({ blockChain }) => {\n          await blockChain.levelUp();\n        },\n        onDone: {\n          target: \"farming\",\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message,\n          }),\n        },\n      },\n    },\n    rewarding: {\n      invoke: {\n        id: \"rewarding\",\n        src: async ({ blockChain }, event) => blockChain.receiveReward(),\n        onDone: {\n          target: \"farming\",\n          // actions - assign() data?\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message,\n          }),\n        },\n      },\n    },\n    crafting: {\n      invoke: {\n        id: \"crafting\",\n        src: async ({ blockChain }, event) => {\n          if ((event as CraftEvent).recipe.communityMember) {\n            return blockChain.communityCraft(event as CraftEvent);\n          }\n\n          return blockChain.craft(event as CraftEvent);\n        },\n        onDone: {\n          target: \"farming\",\n          // actions - assign() data?\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message,\n          }),\n        },\n      },\n    },\n    chopping: {\n      invoke: {\n        id: \"chopping\",\n        src: async ({ blockChain }, event) =>\n          blockChain.stake(event as ChopEvent),\n        onDone: {\n          target: \"farming\",\n          // actions - assign() data?\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message,\n          }),\n        },\n      },\n    },\n    mining: {\n      invoke: {\n        id: \"mining\",\n        src: async ({ blockChain }, event) =>\n          blockChain.stake(event as ChopEvent),\n        onDone: {\n          target: \"farming\",\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message,\n          }),\n        },\n      },\n    },\n    collecting: {\n      invoke: {\n        id: \"collecting\",\n        src: async ({ blockChain }) => blockChain.collectEggs(),\n        onDone: {\n          target: \"farming\",\n        },\n        onError: {\n          target: \"failure\",\n          actions: assign({\n            errorCode: (context, event) => event.data.message,\n          }),\n        },\n      },\n    },\n    failure: {\n      on: {\n        NETWORK_CHANGED: {\n          target: \"loading\",\n          actions: (context) => {\n            context.blockChain.endTrialMode();\n          },\n        },\n        TRIAL: {\n          target: \"onboarding\",\n          actions: (context) => {\n            context.blockChain.startTrialMode();\n          },\n        },\n      },\n    },\n    saveFailure: {\n      on: {\n        SAVE: {\n          target: \"saving\",\n          actions: (context) => {\n            context.blockChain.offsetTime();\n          },\n        },\n        CLOSE: {\n          target: \"farming\",\n        },\n      },\n    },\n    timerComplete: {\n      on: {\n        SAVE: {\n          target: \"saving\",\n          actions: (context) => {\n            context.blockChain.offsetTime();\n          },\n        },\n      },\n    },\n    unsupported: {},\n  },\n});\n\nexport const service = interpret<\n  Context,\n  any,\n  BlockchainEvent,\n  BlockchainState\n>(blockChainMachine);\n\nservice.start();\n"]},"metadata":{},"sourceType":"module"}
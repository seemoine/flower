{"ast":null,"code":"var _jsxFileName = \"/home/jacob/Documents/Programming/myApp/src/dapp/components/farm/Farm.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useService } from \"@xstate/react\";\nimport Decimal from \"decimal.js-light\";\nimport { Land } from \"./Land\";\nimport { FRUITS, getMarketFruits } from \"../../types/fruits\";\nimport { Fruit, Action, isFruit, ACTIONABLE_ITEMS } from \"../../types/contract\";\nimport { cacheAccountFarm, getSelectedItem } from \"../../utils/localStorage\";\nimport { service } from \"../../machine\";\nimport coin from \"../../images/ui/icon.png\";\nimport questionMark from \"../../images/ui/expression_confused.png\";\nimport { Panel } from \"../ui/Panel\";\nimport { Timer } from \"../ui/Timer\";\nimport { Button } from \"../ui/Button\";\nimport { AudioPlayer } from \"../ui/AudioPlayer\";\nimport { FruitBoard } from \"./FruitBoard\";\nimport { Tour } from \"./Tour\";\nimport { getMarketRate } from \"../../utils/supply\";\nimport { Message } from \"../ui/Message\";\nimport { DEFAULT_INVENTORY } from \"../../types/crafting\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Farm = () => {\n  _s();\n\n  const [balance, setBalance] = React.useState(new Decimal(0));\n  const [land, setLand] = React.useState(Array(5).fill({\n    fruit: Fruit.None,\n    createdAt: 0\n  }));\n  const [inventory, setInventory] = React.useState(DEFAULT_INVENTORY);\n  const [totalItemSupplies, setTotalItemSupplies] = React.useState(DEFAULT_INVENTORY);\n  const [supply, setSupply] = React.useState({\n    statue: 0\n  });\n  const farmIsFresh = React.useRef(false);\n  const accountId = React.useRef();\n  const [selectedItem, setSelectedItem] = React.useState(ACTIONABLE_ITEMS[0]);\n  const [fruits, setFruits] = React.useState(FRUITS);\n  const [machineState, send] = useService(service);\n  const isDirty = machineState.context.blockChain.isUnsaved(); // If they have unsaved changes, alert them before leaving\n\n  React.useEffect(() => {\n    window.onbeforeunload = function (e) {\n      if (!isDirty) {\n        return undefined;\n      }\n\n      e = e || window.event; // For IE and Firefox prior to version 4\n\n      if (e) {\n        e.returnValue = \"Sure?\";\n      } // For Safari\n\n\n      return \"Sure?\";\n    };\n  }, [isDirty, machineState]);\n  React.useEffect(() => {\n    const load = async () => {\n      const isFarming = machineState.matches(\"farming\") || machineState.matches(\"onboarding\");\n      const doRefresh = !farmIsFresh.current; // HACK: Upgrade modal does not upgrade balance and farm so mark farm as stale\n\n      if (machineState.matches(\"upgrading\") || machineState.matches(\"loading\") || machineState.matches(\"rewarding\") || machineState.matches(\"crafting\")) {\n        farmIsFresh.current = false;\n      } // Load fresh data from blockchain only if there are no unsaved changes\n\n\n      if (isFarming && doRefresh && !machineState.context.blockChain.isUnsaved()) {\n        const {\n          farm,\n          balance: currentBalance,\n          id\n        } = machineState.context.blockChain.myFarm;\n        setLand(farm);\n        setBalance(new Decimal(currentBalance));\n        farmIsFresh.current = true;\n        accountId.current = id;\n        const cachedItem = getSelectedItem(id);\n        setSelectedItem(cachedItem);\n        const supply = await machineState.context.blockChain.totalSupply();\n        const marketRate = getMarketRate(supply);\n        const marketFruits = getMarketFruits(marketRate);\n        setFruits(marketFruits);\n      }\n\n      if (machineState.matches(\"farming\")) {\n        const inventory = await machineState.context.blockChain.getInventory();\n        setInventory(inventory);\n        const itemSupplies = await machineState.context.blockChain.getTotalItemSupplies();\n        setTotalItemSupplies(itemSupplies);\n      }\n    };\n\n    load();\n  }, [machineState]);\n\n  const onChangeItem = item => {\n    setSelectedItem(item);\n    cacheAccountFarm(accountId.current, {\n      selectedItem: item.name\n    }); // TODO - ?localStorage.setItem(\"fruit\", fruit);\n  };\n\n  const onHarvest = React.useCallback(async landIndex => {\n    if (!isFruit(selectedItem)) {\n      return;\n    }\n\n    const now = Math.floor(Date.now() / 1000);\n    const harvestedFruit = land[landIndex];\n    const transaction = {\n      action: Action.Harvest,\n      fruit: Fruit.None,\n      landIndex,\n      createdAt: now\n    };\n    machineState.context.blockChain.addEvent(transaction);\n    setLand(oldLand => oldLand.map((field, index) => index === landIndex ? {\n      fruit: Fruit.None,\n      createdAt: 0\n    } : field));\n    const price = fruits.find(item => item.fruit === harvestedFruit.fruit).sellPrice;\n    setBalance(balance.plus(price));\n    send(\"HARVEST\");\n  }, [balance, fruits, land, machineState.context.blockChain, send]);\n  const onPlant = React.useCallback(async landIndex => {\n    if (!isFruit(selectedItem)) {\n      return;\n    }\n\n    const price = fruits.find(item => item.fruit === selectedItem.fruit).buyPrice;\n\n    if (balance.lt(price)) {\n      return;\n    }\n\n    const now = Math.floor(Date.now() / 1000);\n    const transaction = {\n      action: Action.Plant,\n      fruit: selectedItem.fruit,\n      landIndex,\n      createdAt: now\n    };\n    machineState.context.blockChain.addEvent(transaction);\n    setLand(oldLand => {\n      const newLand = oldLand.map((field, index) => index === landIndex ? transaction : field);\n      return newLand;\n    });\n    setBalance(balance.minus(price));\n    send(\"PLANT\");\n  }, [balance, selectedItem, fruits, machineState.context.blockChain, send]);\n\n  const onBuyMore = () => {\n    window.open(\"https://quickswap.exchange/#/swap?outputCurrency=0xdf9B4b57865B403e08c85568442f95c26b7896b0\", \"_blank\");\n  };\n\n  const save = async () => {\n    send(\"SAVE\", {\n      action: \"SYNC\"\n    });\n  };\n\n  const safeBalance = balance.toNumber();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Tour, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Land, {\n      fruits: fruits,\n      selectedItem: selectedItem,\n      land: land,\n      balance: safeBalance,\n      onHarvest: onHarvest,\n      onPlant: onPlant,\n      account: accountId.current,\n      inventory: inventory,\n      totalItemSupplies: totalItemSupplies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AudioPlayer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      id: \"save-button\",\n      children: /*#__PURE__*/_jsxDEV(Panel, {\n        hasInner: false,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: save,\n          disabled: !isDirty || machineState.matches(\"timerComplete\") || machineState.matches(\"saving\"),\n          children: [\"Save\", isDirty && /*#__PURE__*/_jsxDEV(Timer, {\n            startAtSeconds: machineState.context.blockChain.lastSaved()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => window.open(\"https://docs.sunflower-farmers.com/\"),\n          children: [\"About\", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: questionMark,\n            id: \"question\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"balance\",\n      children: /*#__PURE__*/_jsxDEV(Panel, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"inner\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: coin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 13\n          }, this), machineState.context.blockChain.isConnected && safeBalance.toFixed(3)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"buy-now\",\n      onClick: onBuyMore,\n      children: /*#__PURE__*/_jsxDEV(Message, {\n        children: \"Quickswap\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FruitBoard, {\n      fruits: fruits,\n      selectedItem: selectedItem,\n      onSelectItem: onChangeItem,\n      land: land,\n      balance: safeBalance,\n      inventory: inventory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Farm, \"P9TB1FYxPREx0drUefm8/aqvaAI=\", false, function () {\n  return [useService];\n});\n\n_c = Farm;\nexport default Farm;\n\nvar _c;\n\n$RefreshReg$(_c, \"Farm\");","map":{"version":3,"sources":["/home/jacob/Documents/Programming/myApp/src/dapp/components/farm/Farm.tsx"],"names":["React","useService","Decimal","Land","FRUITS","getMarketFruits","Fruit","Action","isFruit","ACTIONABLE_ITEMS","cacheAccountFarm","getSelectedItem","service","coin","questionMark","Panel","Timer","Button","AudioPlayer","FruitBoard","Tour","getMarketRate","Message","DEFAULT_INVENTORY","Farm","balance","setBalance","useState","land","setLand","Array","fill","fruit","None","createdAt","inventory","setInventory","totalItemSupplies","setTotalItemSupplies","supply","setSupply","statue","farmIsFresh","useRef","accountId","selectedItem","setSelectedItem","fruits","setFruits","machineState","send","isDirty","context","blockChain","isUnsaved","useEffect","window","onbeforeunload","e","undefined","event","returnValue","load","isFarming","matches","doRefresh","current","farm","currentBalance","id","myFarm","cachedItem","totalSupply","marketRate","marketFruits","getInventory","itemSupplies","getTotalItemSupplies","onChangeItem","item","name","onHarvest","useCallback","landIndex","now","Math","floor","Date","harvestedFruit","transaction","action","Harvest","addEvent","oldLand","map","field","index","price","find","sellPrice","plus","onPlant","buyPrice","lt","Plant","newLand","minus","onBuyMore","open","save","safeBalance","toNumber","lastSaved","isConnected","toFixed"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useService } from \"@xstate/react\";\nimport Decimal from \"decimal.js-light\";\n\nimport { Land } from \"./Land\";\nimport { FruitItem, FRUITS, getMarketFruits } from \"../../types/fruits\";\nimport {\n  Fruit,\n  Square,\n  Action,\n  Transaction,\n  ActionableItem,\n  isFruit,\n  ACTIONABLE_ITEMS,\n} from \"../../types/contract\";\nimport {\n  cacheAccountFarm,\n  getSelectedItem,\n} from \"../../utils/localStorage\";\n\nimport {\n  service,\n  Context,\n  BlockchainEvent,\n  BlockchainState,\n} from \"../../machine\";\n\nimport coin from \"../../images/ui/icon.png\";\nimport questionMark from \"../../images/ui/expression_confused.png\";\n\nimport { Panel } from \"../ui/Panel\";\nimport { Timer } from \"../ui/Timer\";\nimport { Button } from \"../ui/Button\";\nimport { AudioPlayer } from \"../ui/AudioPlayer\";\n\nimport { FruitBoard } from \"./FruitBoard\";\nimport { Tour } from \"./Tour\";\nimport { getMarketRate } from \"../../utils/supply\";\nimport { Message } from \"../ui/Message\";\nimport { DEFAULT_INVENTORY, Inventory } from \"../../types/crafting\";\n\nexport const Farm: React.FC = () => {\n  const [balance, setBalance] = React.useState<Decimal>(new Decimal(0));\n  const [land, setLand] = React.useState<Square[]>(\n    Array(5).fill({\n      fruit: Fruit.None,\n      createdAt: 0,\n    })\n  );\n  const [inventory, setInventory] =\n    React.useState<Inventory>(DEFAULT_INVENTORY);\n\n  const [totalItemSupplies, setTotalItemSupplies] =\n    React.useState<Inventory>(DEFAULT_INVENTORY);\n\n  const [supply, setSupply] = React.useState<Supply>({\n    statue: 0,\n  });\n\n  const farmIsFresh = React.useRef(false);\n  const accountId = React.useRef<string>();\n  const [selectedItem, setSelectedItem] = React.useState<ActionableItem>(\n    ACTIONABLE_ITEMS[0]\n  );\n  const [fruits, setFruits] = React.useState<FruitItem[]>(FRUITS);\n  const [machineState, send] = useService<\n    Context,\n    BlockchainEvent,\n    BlockchainState\n  >(service);\n\n  const isDirty = machineState.context.blockChain.isUnsaved();\n\n  // If they have unsaved changes, alert them before leaving\n  React.useEffect(() => {\n    window.onbeforeunload = function (e) {\n      if (!isDirty) {\n        return undefined;\n      }\n      e = e || window.event;\n\n      // For IE and Firefox prior to version 4\n      if (e) {\n        e.returnValue = \"Sure?\";\n      }\n\n      // For Safari\n      return \"Sure?\";\n    };\n  }, [isDirty, machineState]);\n\n  React.useEffect(() => {\n    const load = async () => {\n      const isFarming =\n        machineState.matches(\"farming\") ||\n        machineState.matches(\"onboarding\");\n\n      const doRefresh = !farmIsFresh.current;\n\n      // HACK: Upgrade modal does not upgrade balance and farm so mark farm as stale\n      if (\n        machineState.matches(\"upgrading\") ||\n        machineState.matches(\"loading\") ||\n        machineState.matches(\"rewarding\") ||\n        machineState.matches(\"crafting\")\n      ) {\n        farmIsFresh.current = false;\n      }\n\n      // Load fresh data from blockchain only if there are no unsaved changes\n      if (\n        isFarming &&\n        doRefresh &&\n        !machineState.context.blockChain.isUnsaved()\n      ) {\n        const {\n          farm,\n          balance: currentBalance,\n          id,\n        } = machineState.context.blockChain.myFarm;\n        setLand(farm);\n        setBalance(new Decimal(currentBalance));\n        farmIsFresh.current = true;\n        accountId.current = id;\n\n        const cachedItem = getSelectedItem(id);\n        setSelectedItem(cachedItem);\n\n        const supply = await machineState.context.blockChain.totalSupply();\n        const marketRate = getMarketRate(supply);\n        const marketFruits = getMarketFruits(marketRate);\n        setFruits(marketFruits);\n      }\n\n      if (machineState.matches(\"farming\")) {\n        const inventory =\n          await machineState.context.blockChain.getInventory();\n        setInventory(inventory);\n        const itemSupplies =\n          await machineState.context.blockChain.getTotalItemSupplies();\n        setTotalItemSupplies(itemSupplies);\n      }\n    };\n\n    load();\n  }, [machineState]);\n\n  const onChangeItem = (item: ActionableItem) => {\n    setSelectedItem(item);\n\n    cacheAccountFarm(accountId.current, { selectedItem: item.name });\n    // TODO - ?localStorage.setItem(\"fruit\", fruit);\n  };\n  const onHarvest = React.useCallback(\n    async (landIndex: number) => {\n      if (!isFruit(selectedItem)) {\n        return;\n      }\n\n      const now = Math.floor(Date.now() / 1000);\n\n      const harvestedFruit = land[landIndex];\n      const transaction: Transaction = {\n        action: Action.Harvest,\n        fruit: Fruit.None,\n        landIndex,\n        createdAt: now,\n      };\n      machineState.context.blockChain.addEvent(transaction);\n\n      setLand((oldLand) =>\n        oldLand.map((field, index) =>\n          index === landIndex ? { fruit: Fruit.None, createdAt: 0 } : field\n        )\n      );\n      const price = fruits.find(\n        (item) => item.fruit === harvestedFruit.fruit\n      ).sellPrice;\n\n      setBalance(balance.plus(price));\n\n      send(\"HARVEST\");\n    },\n    [balance, fruits, land, machineState.context.blockChain, send]\n  );\n\n  const onPlant = React.useCallback(\n    async (landIndex: number) => {\n      if (!isFruit(selectedItem)) {\n        return;\n      }\n\n      const price = fruits.find(\n        (item) => item.fruit === selectedItem.fruit\n      ).buyPrice;\n\n      if (balance.lt(price)) {\n        return;\n      }\n\n      const now = Math.floor(Date.now() / 1000);\n      const transaction: Transaction = {\n        action: Action.Plant,\n        fruit: selectedItem.fruit,\n        landIndex,\n        createdAt: now,\n      };\n      machineState.context.blockChain.addEvent(transaction);\n\n      setLand((oldLand) => {\n        const newLand = oldLand.map((field, index) =>\n          index === landIndex ? transaction : field\n        );\n        return newLand;\n      });\n      setBalance(balance.minus(price));\n\n      send(\"PLANT\");\n    },\n    [balance, selectedItem, fruits, machineState.context.blockChain, send]\n  );\n\n  const onBuyMore = () => {\n    window.open(\n      \"https://quickswap.exchange/#/swap?outputCurrency=0xdf9B4b57865B403e08c85568442f95c26b7896b0\",\n      \"_blank\"\n    );\n  };\n\n  const save = async () => {\n    send(\"SAVE\", { action: \"SYNC\" });\n  };\n\n  const safeBalance = balance.toNumber();\n\n  return (\n    <>\n      <Tour />\n      <Land\n        fruits={fruits}\n        selectedItem={selectedItem}\n        land={land}\n        balance={safeBalance}\n        onHarvest={onHarvest}\n        onPlant={onPlant}\n        account={accountId.current}\n        inventory={inventory}\n        totalItemSupplies={totalItemSupplies}\n      />\n      <AudioPlayer />\n      <span id=\"save-button\">\n        <Panel hasInner={false}>\n          <Button\n            onClick={save}\n            disabled={\n              !isDirty ||\n              machineState.matches(\"timerComplete\") ||\n              machineState.matches(\"saving\")\n            }\n          >\n            Save\n            {isDirty && (\n              <Timer\n                startAtSeconds={machineState.context.blockChain.lastSaved()}\n              />\n            )}\n          </Button>\n          <Button\n            onClick={() =>\n              window.open(\"https://docs.sunflower-farmers.com/\")\n            }\n          >\n            About\n            <img src={questionMark} id=\"question\" />\n          </Button>\n        </Panel>\n      </span>\n\n      <div id=\"balance\">\n        <Panel>\n          <div id=\"inner\">\n            <img src={coin} />\n            {machineState.context.blockChain.isConnected &&\n              safeBalance.toFixed(3)}\n          </div>\n        </Panel>\n      </div>\n\n      <div id=\"buy-now\" onClick={onBuyMore}>\n        <Message>Quickswap</Message>\n      </div>\n\n      <FruitBoard\n        fruits={fruits}\n        selectedItem={selectedItem}\n        onSelectItem={onChangeItem}\n        land={land}\n        balance={safeBalance}\n        inventory={inventory}\n      />\n    </>\n  );\n};\n\nexport default Farm;\n"]},"metadata":{},"sourceType":"module"}